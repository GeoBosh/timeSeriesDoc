[{"path":"https://geobosh.github.io/timeSeriesDoc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Diethelm Wuertz. Author.            original code Tobias Setz. Author. Yohan Chalabi. Author. Martin Maechler. Contributor. Georgi N. Boshnakov. Maintainer, author.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wuertz D, Setz T, Chalabi Y, Boshnakov GN (2023). timeSeries: Financial Time Series Objects (Rmetrics). https://r-forge.r-project.org/scm/viewvc.php/pkg/timeSeries/?root=rmetrics (devel), https://www.rmetrics.org, https://geobosh.github.io/timeSeriesDoc/ (doc).","code":"@Manual{,   title = {timeSeries: Financial Time Series Objects (Rmetrics)},   author = {Diethelm Wuertz and Tobias Setz and Yohan Chalabi and Georgi N. Boshnakov},   year = {2023},   note = {https://r-forge.r-project.org/scm/viewvc.php/pkg/timeSeries/?root=rmetrics (devel), https://www.rmetrics.org, https://geobosh.github.io/timeSeriesDoc/ (doc)}, }"},{"path":"https://geobosh.github.io/timeSeriesDoc/index.html","id":"installing-timeseries","dir":"","previous_headings":"","what":"Financial Time Series Objects (Rmetrics)","title":"Financial Time Series Objects (Rmetrics)","text":"Install latest stable version timeSeries CRAN: can install development version timeSeries R-forge: report bugs visit Rmetrics.","code":"install.packages(\"timeSeries\") install.packages(\"timeSeries\", repos = \"http://R-Forge.R-project.org\")"},{"path":"https://geobosh.github.io/timeSeriesDoc/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Financial Time Series Objects (Rmetrics)","text":"can view documentation timeSeries timeSeriesDoc download reference manual latest release CRAN. also large vignette plots.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/00timeSeries-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities and tools package — timeSeries-package","title":"Utilities and tools package — timeSeries-package","text":"Package timeSeries part Rmetrics suit R packages.   provides class, timeSeries, particularly aimed analysis   financial data, along many methods, functions, utilities   statistical financial computations time series.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/00timeSeries-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utilities and tools package — timeSeries-package","text":"Diethelm Wuertz [aut] (original code), Tobias Setz [aut], Yohan Chalabi [aut], Martin Maechler [ctb] (<https://orcid.org/0000-0002-8685-9910>), Georgi N. Boshnakov [cre, ctb] Maintainer: Georgi N. Boshnakov <georgi.boshnakov@manchester.ac.uk>","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/00timeSeries-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utilities and tools package — timeSeries-package","text":"following sections updated time.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply functions over time windows — apply","title":"Apply functions over time windows — apply","text":"Applies function \"timeSeries\" object regular   irregular time windows, possibly overlapping.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply functions over time windows — apply","text":"","code":"# S4 method for timeSeries apply(X, MARGIN, FUN, ..., simplify = TRUE)  fapply(x, from, to, FUN, ...)  applySeries(x, from = NULL, to = NULL, by = c(\"monthly\", \"quarterly\"),              FUN = colMeans, units = NULL, format = x@format,              zone = x@FinCenter, FinCenter = x@FinCenter,              recordIDs = data.frame(), title = x@title,              documentation = x@documentation, ...)  rollDailySeries(x, period = \"7d\", FUN, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply functions over time windows — apply","text":"x,X object class timeSeries. MARGIN vector giving subscripts function     applied , see base R's apply. FUN function applied. function applySeries     default setting FUN = colMeans. simplify simplify result? , starting date end date \"timeDate\" objects. Note,     must time ordered .      missing function fapply set     default =start(x), =end(x).  character value either \"monthly\" \"quarterly\" used     function applySeries. default value     \"monthly\". operative arguments     default values NULL.  case     function FUN applied monthly quarterly periods.  units optional character string, allows overwrite current     column names timeSeries object. default NULL     means column names selected automatically.  format format specification input character vector POSIX     notation.  zone time zone financial center data recorded. FinCenter character value location  financial center      named \"continent/city\", \"city\". recordIDs data frame can used record identification     information. Note, yet handled apply functions,     empty data.frame returned.  title optional title string, specified input's data name     deparsed.  documentation optional documentation string, vector character strings. period character string specifying rollling period composed     length period unit, e.g. \"7d\" represents one     week.  ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-apply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply functions over time windows — apply","text":"\"timeSeries\" method apply extracts core data   (matrix) X calls apply, passing   remaining arguments. result suitable, converts   \"timeSeries\", otherwise returns . ‘Suitable’   means matrix vector (converted   matrix) number observations X. Like apply applies function margins array,   function fapply applies function time stamps signal   counts financial (therefore “f” front   function name) time series class \"timeSeries\". applySeries takes \"timeSeries\" object input   applies FUN windows x.  windows specified   , need length.   [], [] specifies -th window.    time(x) \"timeDate\" object,   converted \"timeDate\" (already   objects), otherwise converted integers. alternative way specify window(s)   applySeries operates argument . used   missing NULL.   = \"monthly\" = \"quarterly\" applies FUN data   year-month year-quarter, respectively. year-month   mean separate windows months different   years. resulting time stamps time stamps   vector. periods can regular irregular, can even   overlap. = start(x) = end(x), function   behaves like apply column margin. fapply applySeries (fact, former   calls latter), except defaults   start(x) end(x), respectively. (GNB:   addition, fapply throws error x   ‘signal series’.) rollDailySeries rolls daily 'timeSeries' given period.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply functions over time windows — apply","text":"rollDailySeries, object class \"timeSeries\"   rolling values, computed function FUN.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply functions over time windows — apply","text":"","code":"## Percentual Returns of Swiss Bond Index and Performance Index -     LPP <- 100 * LPP2005REC[, c(\"SBI\", \"SPI\")]    head(LPP, 20) #> GMT #>                   SBI        SPI #> 2005-11-01 -0.0612745  0.8414595 #> 2005-11-02 -0.2762009  0.2519342 #> 2005-11-03 -0.1153092  1.2707292 #> 2005-11-04 -0.3235750 -0.0702757 #> 2005-11-07  0.1310970  0.6205226 #> 2005-11-08  0.0539312  0.0329260 #> 2005-11-09 -0.2545021 -0.2378200 #> 2005-11-10  0.1003358  0.0922087 #> 2005-11-11  0.0616951  1.3334906 #> 2005-11-14  0.0693615 -0.4693064 #> 2005-11-15  0.0154071  0.1266865 #> 2005-11-16  0.2999656 -0.7187498 #> 2005-11-17 -0.1306436  0.7658103 #> 2005-11-18 -0.2232573  1.2527202 #> 2005-11-21  0.1155402  0.2659666 #> 2005-11-22 -0.0230974  0.2142494 #> 2005-11-23  0.0692761  0.3567128 #> 2005-11-24  0.2075407 -0.2559544 #> 2005-11-25 -0.0614487  0.3374818 #> 2005-11-28 -0.0307385 -0.9816739     ## Aggregate Quarterly Returns -    applySeries(LPP, by = \"quarterly\", FUN = colSums) #> GMT #>                   SBI       SPI #> 2005-12-31  0.5193189  7.295300 #> 2006-03-31 -1.6590275  7.074801 #> 2006-06-30 -1.1685058 -3.428832 #> 2006-09-30  2.7589662  9.780371 #> 2006-12-31 -0.0076177  5.359906 #> 2007-03-31 -0.2595182  3.604943 #> 2007-06-30 -0.1682858  2.047652     ## Aggregate Quarterly every last Friday in Quarter -    oneDay <- 24*3600    from <- unique(timeFirstDayInQuarter(time(LPP))) - oneDay    from <- timeLastNdayInMonth(from, nday = 5)    to <- unique(timeLastDayInQuarter(time(LPP)))    to <- timeLastNdayInMonth(to, nday = 5)    data.frame(from = as.character(from), to = as.character(to)) #>         from         to #> 1 2005-09-30 2005-12-30 #> 2 2005-12-30 2006-03-31 #> 3 2006-03-31 2006-06-30 #> 4 2006-06-30 2006-09-29 #> 5 2006-09-29 2006-12-29 #> 6 2006-12-29 2007-03-30 #> 7 2007-03-30 2007-06-29     applySeries(LPP, from, to, FUN = colSums) #> GMT #>                   SBI       SPI #> 2005-12-30  0.5193189  7.295300 #> 2006-03-31 -1.7047209  6.677154 #> 2006-06-30 -1.1452689 -3.521758 #> 2006-09-29  2.7041309 11.227752 #> 2006-12-29 -0.1295039  5.500849 #> 2007-03-30 -0.1451061  3.494746 #> 2007-06-29 -0.1988528  2.097361 ## Alternative Use -     fapply(LPP, from, to, FUN = colSums) #> GMT #>                   SBI       SPI #> 2005-12-30  0.5193189  7.295300 #> 2006-03-31 -1.7047209  6.677154 #> 2006-06-30 -1.1452689 -3.521758 #> 2006-09-29  2.7041309 11.227752 #> 2006-12-29 -0.1295039  5.500849 #> 2007-03-30 -0.1451061  3.494746 #> 2007-06-29 -0.1988528  2.097361     ## Count Trading Days per Month -     colCounts <- function(x) rep(NROW(x), times = NCOL(x))    applySeries(LPP, FUN = colCounts, by = \"monthly\") #> GMT #>            SBI SPI #> 2005-11-30  22  22 #> 2005-12-31  22  22 #> 2006-01-31  22  22 #> 2006-02-28  20  20 #> 2006-03-31  23  23 #> 2006-04-30  20  20 #> 2006-05-31  23  23 #> 2006-06-30  22  22 #> 2006-07-31  21  21 #> 2006-08-31  23  23 #> 2006-09-30  21  21 #> 2006-10-31  22  22 #> 2006-11-30  22  22 #> 2006-12-31  21  21 #> 2007-01-31  23  23 #> 2007-02-28  20  20 #> 2007-03-31  22  22 #> 2007-04-30   8   8   ## TODO: examples for rollDailySeries()"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-attach.html","id":null,"dir":"Reference","previous_headings":"","what":"Attach a 'timeSeries' to the search path — attach","title":"Attach a 'timeSeries' to the search path — attach","text":"Attaches \"timeSeries\" object search path.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-attach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attach a 'timeSeries' to the search path — attach","text":"","code":"# S4 method for timeSeries attach(what, pos = 2, name = deparse(substitute(what)),      warn.conflicts = TRUE)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-attach.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Attach a 'timeSeries' to the search path — attach","text":"function detach base package can used   detach attached objects.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-attach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attach a 'timeSeries' to the search path — attach","text":"name alternative way specify database attached.         See details help(attach,package=base). pos integer specifying position search() attach         database.          See details help(attach,package=base). warn.conflicts logical value. TRUE, warnings printed          conflicts attaching database, unless database          contains object .conflicts.OK. conflict          function masking function, non-function masking          non-function.          See details help(attach,package=base). [attach] -          database attached. may currently \"timeSeries\" object,         data.frame list R data file created save NULL          environment.          See details help(attach, package=base).","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-attach.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attach a 'timeSeries' to the search path — attach","text":"environment returned invisibly name attribute.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-attach.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Attach a 'timeSeries' to the search path — attach","text":"","code":"## Load Microsoft Data Set -     x <- MSFT[1:10, ]    colnames(x) #> [1] \"Open\"   \"High\"   \"Low\"    \"Close\"  \"Volume\"     ## Attach the Series and Compute the Range -     attach(x)    range <- High - Low    range #>  [1] 3.7500 1.2500 2.6875 2.5625 3.3125 2.0625 2.0000 2.0000 2.7500 1.7500     ## Convert Vector to a \\code{\"timeSeries\"} Object -    timeSeries(data=range, charvec=time(x), units=\"Range\") #> GMT #>             Range #> 2000-09-27 3.7500 #> 2000-09-28 1.2500 #> 2000-09-29 2.6875 #> 2000-10-02 2.5625 #> 2000-10-03 3.3125 #> 2000-10-04 2.0625 #> 2000-10-05 2.0000 #> 2000-10-06 2.0000 #> 2000-10-09 2.7500 #> 2000-10-10 1.7500     ## Detach the series from the search path -    detach(\"x\")    ans <- try(High, silent=TRUE)    cat(ans[1]) #> Error in eval(expr, envir, enclos) : object 'High' not found"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-cbind.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind ","title":"Bind ","text":"Binds \"timeSeries\" objects either column row.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-cbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind ","text":"","code":"# S3 method for timeSeries cbind(..., deparse.level = 1) # S3 method for timeSeries rbind(..., deparse.level = 1)  # S4 method for timeSeries,ANY cbind2(x, y) ## other methods for 'cbind2' with the same arguments, see Details  # S4 method for timeSeries,ANY rbind2(x, y) ## other methods for 'rbind2' with the same arguments, see Details"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-cbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind ","text":"x, y objects, least one class \"timeSeries\". ... arguments bind. deparse.level see documentation base::cbind.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-cbind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bind ","text":"functions bind objects row rXXX column   (cXXX. cbind rbind S3 generics,   \"timeSeries\" methods describe called   first argument \"timeSeries\". cbind2 rbind2 S4 generics dispatch   first two arguments. \"timeSeries\" methods   invoked whenever least one first two arguments class   \"timeSeries\". functions can called two arguments.   first two merged, result merged third, .","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-cbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind ","text":"object class \"timeSeries\"","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-cbind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind ","text":"","code":"## Load Microsoft Data Set -    x <- MSFT[1:12, ]    x #> GMT #>               Open    High     Low   Close   Volume #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 53077800 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 26180200 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 37026800 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 29281200 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 42687000 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 68226700 #> 2000-10-05 55.5000 57.2500 55.2500 55.3750 40549700 #> 2000-10-06 55.8125 56.7500 54.7500 55.5625 30897000 #> 2000-10-09 55.6250 55.7500 53.0000 54.1875 29161800 #> 2000-10-10 53.9375 55.5625 53.8125 54.5625 31033100 #> 2000-10-11 54.0000 56.9375 54.0000 55.7500 50602900 #> 2000-10-12 56.3125 56.8750 53.8125 54.3750 45109800  ## Bind Columnwise -    X <- cbind(x[, \"Open\"], returns(x[, \"Open\"]))    colnames(X) <- c(\"Open\", \"Return\")    X #> GMT #>               Open       Return #> 2000-09-27 63.4375           NA #> 2000-09-28 60.8125 -0.042259809 #> 2000-09-29 61.0000  0.003078504 #> 2000-10-02 60.5000 -0.008230499 #> 2000-10-03 59.5625 -0.015617184 #> 2000-10-04 56.3750 -0.055000384 #> 2000-10-05 55.5000 -0.015642777 #> 2000-10-06 55.8125  0.005614838 #> 2000-10-09 55.6250 -0.003365118 #> 2000-10-10 53.9375 -0.030806772 #> 2000-10-11 54.0000  0.001158078 #> 2000-10-12 56.3125  0.041932489  ## Bind Rowwise -     Y <- rbind(x[1:3, \"Open\"], x[10:12, \"Open\"])    Y #> GMT #>            Open_Open #> 2000-09-27   63.4375 #> 2000-09-28   60.8125 #> 2000-09-29   61.0000 #> 2000-10-10   53.9375 #> 2000-10-11   54.0000 #> 2000-10-12   56.3125"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Difference a 'timeSeries' object — diff","title":"Difference a 'timeSeries' object — diff","text":"Difference \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Difference a 'timeSeries' object — diff","text":"","code":"# S4 method for timeSeries diff(x, lag = 1, diff = 1, trim = FALSE, pad = NA, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Difference a 'timeSeries' object — diff","text":"x object class \"timeSeries\". lag integer indicating lag use. diff integer indicating order difference. trim logical flag. NAs beginning series     removed?  pad numeric value NAs replaced     beginning series.  ... currently used.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Difference a 'timeSeries' object — diff","text":"differenced \"timeSeries\" object","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Difference a 'timeSeries' object — diff","text":"","code":"## Load Microsoft Data Set -    x <- MSFT[1:12, ]    x #> GMT #>               Open    High     Low   Close   Volume #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 53077800 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 26180200 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 37026800 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 29281200 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 42687000 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 68226700 #> 2000-10-05 55.5000 57.2500 55.2500 55.3750 40549700 #> 2000-10-06 55.8125 56.7500 54.7500 55.5625 30897000 #> 2000-10-09 55.6250 55.7500 53.0000 54.1875 29161800 #> 2000-10-10 53.9375 55.5625 53.8125 54.5625 31033100 #> 2000-10-11 54.0000 56.9375 54.0000 55.7500 50602900 #> 2000-10-12 56.3125 56.8750 53.8125 54.3750 45109800  ## Compute Differences -    diff(x)    #> GMT #>               Open    High     Low   Close    Volume #> 2000-09-27      NA      NA      NA      NA        NA #> 2000-09-28 -2.6250 -1.6875  0.8125  0.6875 -26897600 #> 2000-09-29  0.1875 -0.5625 -2.0000 -1.0000  10846600 #> 2000-10-02 -0.5000 -0.5000 -0.3750 -1.1875  -7745600 #> 2000-10-03 -0.9375 -1.0000 -1.7500 -2.5625  13405800 #> 2000-10-04 -3.1875 -3.2500 -2.0000 -1.1250  25539700 #> 2000-10-05 -0.8750  0.6875  0.7500 -0.0625 -27677000 #> 2000-10-06  0.3125 -0.5000 -0.5000  0.1875  -9652700 #> 2000-10-09 -0.1875 -1.0000 -1.7500 -1.3750  -1735200 #> 2000-10-10 -1.6875 -0.1875  0.8125  0.3750   1871300 #> 2000-10-11  0.0625  1.3750  0.1875  1.1875  19569800 #> 2000-10-12  2.3125 -0.0625 -0.1875 -1.3750  -5493100     ## Trimmed Differences -    diff(x, trim = TRUE)  #> GMT #>               Open    High     Low   Close    Volume #> 2000-09-28 -2.6250 -1.6875  0.8125  0.6875 -26897600 #> 2000-09-29  0.1875 -0.5625 -2.0000 -1.0000  10846600 #> 2000-10-02 -0.5000 -0.5000 -0.3750 -1.1875  -7745600 #> 2000-10-03 -0.9375 -1.0000 -1.7500 -2.5625  13405800 #> 2000-10-04 -3.1875 -3.2500 -2.0000 -1.1250  25539700 #> 2000-10-05 -0.8750  0.6875  0.7500 -0.0625 -27677000 #> 2000-10-06  0.3125 -0.5000 -0.5000  0.1875  -9652700 #> 2000-10-09 -0.1875 -1.0000 -1.7500 -1.3750  -1735200 #> 2000-10-10 -1.6875 -0.1875  0.8125  0.3750   1871300 #> 2000-10-11  0.0625  1.3750  0.1875  1.1875  19569800 #> 2000-10-12  2.3125 -0.0625 -0.1875 -1.3750  -5493100  ## Padded Differences -    diff(x, trim = FALSE, pad = 0)  #> GMT #>               Open    High     Low   Close    Volume #> 2000-09-27  0.0000  0.0000  0.0000  0.0000         0 #> 2000-09-28 -2.6250 -1.6875  0.8125  0.6875 -26897600 #> 2000-09-29  0.1875 -0.5625 -2.0000 -1.0000  10846600 #> 2000-10-02 -0.5000 -0.5000 -0.3750 -1.1875  -7745600 #> 2000-10-03 -0.9375 -1.0000 -1.7500 -2.5625  13405800 #> 2000-10-04 -3.1875 -3.2500 -2.0000 -1.1250  25539700 #> 2000-10-05 -0.8750  0.6875  0.7500 -0.0625 -27677000 #> 2000-10-06  0.3125 -0.5000 -0.5000  0.1875  -9652700 #> 2000-10-09 -0.1875 -1.0000 -1.7500 -1.3750  -1735200 #> 2000-10-10 -1.6875 -0.1875  0.8125  0.3750   1871300 #> 2000-10-11  0.0625  1.3750  0.1875  1.1875  19569800 #> 2000-10-12  2.3125 -0.0625 -0.1875 -1.3750  -5493100"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-dim.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series columns and rows — dimnames","title":"Time series columns and rows — dimnames","text":"Handling columns rows 'timeSeries' objects.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-dim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time series columns and rows — dimnames","text":"Returns dimensions related properties \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-dim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time series columns and rows — dimnames","text":"","code":"## Load Swiss Pension Fund Benchmark Data -    X <- LPP2005REC[1:10, 1:3]     ## Get Dimension -     dim(X) #> [1] 10  3     ## Get Column and Row Names -    dimnames(X) #> [[1]] #>  [1] \"2005-11-01\" \"2005-11-02\" \"2005-11-03\" \"2005-11-04\" \"2005-11-07\" #>  [6] \"2005-11-08\" \"2005-11-09\" \"2005-11-10\" \"2005-11-11\" \"2005-11-14\" #>  #> [[2]] #> [1] \"SBI\" \"SPI\" \"SII\" #>      ## Get Column / Row Names -    colnames(X) #> [1] \"SBI\" \"SPI\" \"SII\"    rownames(X)  #>  [1] \"2005-11-01\" \"2005-11-02\" \"2005-11-03\" \"2005-11-04\" \"2005-11-07\" #>  [6] \"2005-11-08\" \"2005-11-09\" \"2005-11-10\" \"2005-11-11\" \"2005-11-14\"     ## Try your own DIM -     DIM <- function(x) {c(NROW(x), NCOL(x))}    DIM(X)  #> [1] 10  3    DIM(X[, 1]) #> [1] 10  1  ## Try length / LENGTH -     length(X) #> [1] 30    length(X[, 1]) #> [1] 10    LENGTH <- function(X) NROW(X)    LENGTH(X) #> [1] 10     ## Columns / Rows -     ncol(X); NCOL(X) #> [1] 3 #> [1] 3    nrow(X); NROW(X) #> [1] 10 #> [1] 10                  ## See also -     isUnivariate(X) #> [1] FALSE    isMultivariate(X) #> [1] TRUE"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge 'timeSeries' objects — merge","title":"Merge 'timeSeries' objects — merge","text":"Merges several object types \"timeSeries\" objects.     number rows must match.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge 'timeSeries' objects — merge","text":"","code":"merge(x, y, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge 'timeSeries' objects — merge","text":"x,y objects merge, least one class \"timeSeries\". ... objects merge.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge 'timeSeries' objects — merge","text":"\"timeSeries\" object","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-merge.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Merge 'timeSeries' objects — merge","text":"signature(x = \"timeSeries\", y = \"missing\")  signature(x = \"timeSeries\", y = \"\")  signature(x = \"timeSeries\", y = \"matrix\")  signature(x = \"timeSeries\", y = \"numeric\")  signature(x = \"timeSeries\", y = \"timeSeries\")  signature(x = \"\", y = \"\")  signature(x = \"\", y = \"timeSeries\")  signature(x = \"matrix\", y = \"timeSeries\")  signature(x = \"numeric\", y = \"timeSeries\")","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge 'timeSeries' objects — merge","text":"","code":"## Load Series -    x <- MSFT[1:12, ]  ## Merge 'timeSeries' with missing Object -    merge(x) #> GMT #>               Open    High     Low   Close   Volume #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 53077800 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 26180200 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 37026800 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 29281200 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 42687000 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 68226700 #> 2000-10-05 55.5000 57.2500 55.2500 55.3750 40549700 #> 2000-10-06 55.8125 56.7500 54.7500 55.5625 30897000 #> 2000-10-09 55.6250 55.7500 53.0000 54.1875 29161800 #> 2000-10-10 53.9375 55.5625 53.8125 54.5625 31033100 #> 2000-10-11 54.0000 56.9375 54.0000 55.7500 50602900 #> 2000-10-12 56.3125 56.8750 53.8125 54.3750 45109800  set.seed(1234) ## Merge 'timeSeries' with numeric Object -    y <- rnorm(12)    class(y) #> [1] \"numeric\"    merge(x, y) #> GMT #>               Open    High     Low   Close   Volume          x #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 53077800 -1.2070657 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 26180200  0.2774292 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 37026800  1.0844412 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 29281200 -2.3456977 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 42687000  0.4291247 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 68226700  0.5060559 #> 2000-10-05 55.5000 57.2500 55.2500 55.3750 40549700 -0.5747400 #> 2000-10-06 55.8125 56.7500 54.7500 55.5625 30897000 -0.5466319 #> 2000-10-09 55.6250 55.7500 53.0000 54.1875 29161800 -0.5644520 #> 2000-10-10 53.9375 55.5625 53.8125 54.5625 31033100 -0.8900378 #> 2000-10-11 54.0000 56.9375 54.0000 55.7500 50602900 -0.4771927 #> 2000-10-12 56.3125 56.8750 53.8125 54.3750 45109800 -0.9983864  ## Merge 'timeSeries' with matrix Object -    y <- matrix(rnorm(24), ncol=2)    class(y) #> [1] \"matrix\" \"array\"     merge(x, y) #> GMT #>               Open    High     Low   Close   Volume         y.1        y.2 #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 53077800 -0.77625389 -0.6937202 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 26180200  0.06445882 -1.4482049 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 37026800  0.95949406  0.5747557 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 29281200 -0.11028549 -1.0236557 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 42687000 -0.51100951 -0.0151383 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 68226700 -0.91119542 -0.9359486 #> 2000-10-05 55.5000 57.2500 55.2500 55.3750 40549700 -0.83717168  1.1022975 #> 2000-10-06 55.8125 56.7500 54.7500 55.5625 30897000  2.41583518 -0.4755931 #> 2000-10-09 55.6250 55.7500 53.0000 54.1875 29161800  0.13408822 -0.7094400 #> 2000-10-10 53.9375 55.5625 53.8125 54.5625 31033100 -0.49068590 -0.5012581 #> 2000-10-11 54.0000 56.9375 54.0000 55.7500 50602900 -0.44054787 -1.6290935 #> 2000-10-12 56.3125 56.8750 53.8125 54.3750 45109800  0.45958944 -1.1676193  ## Merge 'timeSeries' with matrix Object -    y <- timeSeries(data=rnorm(12), charvec=time(x))    class(y) #> [1] \"timeSeries\" #> attr(,\"package\") #> [1] \"timeSeries\"    merge(x, y) #> GMT #>               Open    High     Low   Close   Volume       TS.1 #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 53077800 -2.1800396 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 26180200 -1.3409932 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 37026800 -0.2942939 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 29281200 -0.4658975 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 42687000  1.4494963 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 68226700 -1.0686427 #> 2000-10-05 55.5000 57.2500 55.2500 55.3750 40549700 -0.8553646 #> 2000-10-06 55.8125 56.7500 54.7500 55.5625 30897000 -0.2806230 #> 2000-10-09 55.6250 55.7500 53.0000 54.1875 29161800 -0.9943401 #> 2000-10-10 53.9375 55.5625 53.8125 54.5625 31033100 -0.9685143 #> 2000-10-11 54.0000 56.9375 54.0000 55.7500 50602900 -1.1073182 #> 2000-10-12 56.3125 56.8750 53.8125 54.3750 45109800 -1.2519859"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample ranks of a time series — rank","title":"Sample ranks of a time series — rank","text":"Returns sample ranks values      'timeSeries' object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample ranks of a time series — rank","text":"","code":"# S4 method for timeSeries rank(x, na.last = TRUE, ties.method = )"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample ranks of a time series — rank","text":"x univariate object class timeSeries. na.last controlling treatment NAs. TRUE, missing values           data put last; FALSE, put first; NA,           removed; \"keep\" kept rank NA. ties.method character string specifying ties treated; can           abbreviated.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-rank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample ranks of a time series — rank","text":"components different (NAs), ranks well      defined, values seq_len(x). values equal      (called ???ties???), argument ties.method determines result      corresponding indices. \"first\" method results      permutation increasing values index set ties.      \"random\" method puts random order whereas      default, \"average\", replaces mean,      \"max\" \"min\" replaces maximum      minimum respectively, latter typical sports      ranking. NA values never considered equal: na.last = TRUE     na.last = FALSE given distinct ranks order      occur x.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample ranks of a time series — rank","text":"\"timeSeries\" object","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample ranks of a time series — rank","text":"","code":"## Load Microsoft Data -    X <- 100 * returns(MSFT)  ## Compute the Ranks -    head(rank(X[, \"Open\"]), 10) #> GMT #>            Open #> 2000-09-28   18 #> 2000-09-29  138 #> 2000-10-02  107 #> 2000-10-03   87 #> 2000-10-04    8 #> 2000-10-05   86 #> 2000-10-06  147 #> 2000-10-09  122 #> 2000-10-10   44 #> 2000-10-11  132     ## Only Interested in the Vector, then use -    head(rank(series(X[, \"Open\"])), 10) #>  [1]  18 138 107  87   8  86 147 122  44 132"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-rev.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse a 'timeSeries' — rev","title":"Reverse a 'timeSeries' — rev","text":"Reverses uni- multivariate \"timeSeries\" object   reversing order time stamps.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-rev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse a 'timeSeries' — rev","text":"","code":"# S4 method for timeSeries rev(x)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-rev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse a 'timeSeries' — rev","text":"x uni- multivariate \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-rev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse a 'timeSeries' — rev","text":" \"timeSeries\" object","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-rev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse a 'timeSeries' — rev","text":"","code":"set.seed(1234) ## Create Dummy \"timeSeries\"  -    tS <- dummyMonthlySeries()     ## Reverse Series -    rev(tS) #> GMT #>                   TS.1       TS.2 #> 2023-12-01 0.544974836 0.03999592 #> 2023-11-01 0.693591292 0.15904600 #> 2023-10-01 0.514251141 0.30269337 #> 2023-09-01 0.666083758 0.31661245 #> 2023-08-01 0.232550506 0.23222591 #> 2023-07-01 0.009495756 0.18672279 #> 2023-06-01 0.640310605 0.26682078 #> 2023-05-01 0.860915384 0.28622328 #> 2023-04-01 0.623379442 0.83729563 #> 2023-03-01 0.609274733 0.29231584 #> 2023-02-01 0.622299405 0.92343348 #> 2023-01-01 0.113703411 0.28273358"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample 'timeSeries' objects — sample","title":"Resample 'timeSeries' objects — sample","text":"Takes sample specified size elements   \"timeSeries\".","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample 'timeSeries' objects — sample","text":"","code":"# S4 method for timeSeries sample(x, size, replace = FALSE, prob = NULL)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample 'timeSeries' objects — sample","text":"x object class \"timeSeries\". size non-negative integer giving number items choose. replace sample replacement TRUE, otherwise without     replacement. prob vector probability weights obtaining elements     vector sampled.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resample 'timeSeries' objects — sample","text":"function takes sample size size elements   time series without replacement depending argument   replace. result returned \"timeSeries\"   object. details arguments see documentation   base:sample.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample 'timeSeries' objects — sample","text":"object class \"timeSeries\"","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resample 'timeSeries' objects — sample","text":"","code":"## Monthly Calendar Series -        x <- daily2monthly(LPP2005REC[, 1:2])[3:14, ]     set.seed(1234) ## Resample the Series with respect to the time stamps -        resampled <- sample(x)    resampled #> GMT #>                     SBI          SPI #> 2006-12-31  0.001144121 -0.001101976 #> 2006-10-31  0.002819157 -0.008238610 #> 2006-06-30 -0.000548353  0.014473814 #> 2006-05-31  0.000233945  0.009323326 #> 2006-04-30  0.001330360 -0.002943741 #> 2006-07-31  0.000077800  0.000267236 #> 2006-01-31 -0.000152952  0.002736095 #> 2006-09-30 -0.001218862  0.001409431 #> 2006-02-28  0.001071074 -0.011956984 #> 2006-08-31  0.000921518 -0.001466397 #> 2006-11-30  0.000453412 -0.008646808 #> 2006-03-31  0.000232369 -0.000929251    is.unsorted(resampled) #> [1] TRUE"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Center and scale 'timeSeries' objects — scale","title":"Center and scale 'timeSeries' objects — scale","text":"Center scale \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Center and scale 'timeSeries' objects — scale","text":"","code":"# S4 method for timeSeries scale(x, center = TRUE, scale = TRUE)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Center and scale 'timeSeries' objects — scale","text":"x object class \"timeSeries\". center, scale numeric vector logical value, see ‘Details’.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-scale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Center and scale 'timeSeries' objects — scale","text":"scale centers /scales columns      \"timeSeries\" object. value center determines column centering performed.      center numeric vector length equal number      columns x, column x corresponding      value center subtracted . center TRUE      centering done subtracting column means (omitting NAs)      x corresponding columns, center      FALSE, centering done. value scale determines column scaling performed      (centering). scale numeric vector length equal       number columns x, column x      divided corresponding value scale. scale      TRUE scaling done dividing (centered) columns      x standard deviations center TRUE,      root mean square otherwise. scale FALSE,      scaling done.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Center and scale 'timeSeries' objects — scale","text":"centered /scaled \"timeSeries\" object","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Center and scale 'timeSeries' objects — scale","text":"","code":"## Load Series:    x <- 100* LPP2005REC[, c(\"SBI\", \"SPI\")]     ## Scale and Center -    X <- scale(x)    hist(X[, 1], prob=TRUE)    s <- seq(-3, 3, length=201)    lines(s, dnorm(s), col=\"red\")"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort a 'timeSeries' by time stamps — sort","title":"Sort a 'timeSeries' by time stamps — sort","text":"Sort \"timeSeries\" object respect time stamps.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort a 'timeSeries' by time stamps — sort","text":"","code":"# S4 method for timeSeries sort(x, decreasing = FALSE, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-sort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sort a 'timeSeries' by time stamps — sort","text":"Sorts time series either increasing decreasing time stamp   order. Internally function order R's base package   used. order generates permutation rearranges time   stamps ascending descending order. find series unsorted, use .unsorted.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort a 'timeSeries' by time stamps — sort","text":"x \"timeSeries\" object. decreasing logical flag. sort increasing decreasing order?     default FALSE. ... optional arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort a 'timeSeries' by time stamps — sort","text":"\"timeSeries\" object","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-sort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort a 'timeSeries' by time stamps — sort","text":"","code":"## Monthly Calendar Series -        x <- daily2monthly(LPP2005REC[, 1:2])[3:14, ]     set.seed(1234) ## Resample the Series with respect to the time stamps -        resampled <- sample(x)    resampled #> GMT #>                     SBI          SPI #> 2006-12-31  0.001144121 -0.001101976 #> 2006-10-31  0.002819157 -0.008238610 #> 2006-06-30 -0.000548353  0.014473814 #> 2006-05-31  0.000233945  0.009323326 #> 2006-04-30  0.001330360 -0.002943741 #> 2006-07-31  0.000077800  0.000267236 #> 2006-01-31 -0.000152952  0.002736095 #> 2006-09-30 -0.001218862  0.001409431 #> 2006-02-28  0.001071074 -0.011956984 #> 2006-08-31  0.000921518 -0.001466397 #> 2006-11-30  0.000453412 -0.008646808 #> 2006-03-31  0.000232369 -0.000929251    is.unsorted(resampled) #> [1] TRUE     ## Now sort the serie in decreasing time order -     sorted <- sort(resampled, , decreasing = TRUE)    sorted #> GMT #>                     SBI          SPI #> 2006-12-31  0.001144121 -0.001101976 #> 2006-11-30  0.000453412 -0.008646808 #> 2006-10-31  0.002819157 -0.008238610 #> 2006-09-30 -0.001218862  0.001409431 #> 2006-08-31  0.000921518 -0.001466397 #> 2006-07-31  0.000077800  0.000267236 #> 2006-06-30 -0.000548353  0.014473814 #> 2006-05-31  0.000233945  0.009323326 #> 2006-04-30  0.001330360 -0.002943741 #> 2006-03-31  0.000232369 -0.000929251 #> 2006-02-28  0.001071074 -0.011956984 #> 2006-01-31 -0.000152952  0.002736095    is.unsorted(sorted) #> [1] TRUE     ## Is the reverted series ordered? -     reverted <- rev(sorted)    reverted #> GMT #>                     SBI          SPI #> 2006-01-31 -0.000152952  0.002736095 #> 2006-02-28  0.001071074 -0.011956984 #> 2006-03-31  0.000232369 -0.000929251 #> 2006-04-30  0.001330360 -0.002943741 #> 2006-05-31  0.000233945  0.009323326 #> 2006-06-30 -0.000548353  0.014473814 #> 2006-07-31  0.000077800  0.000267236 #> 2006-08-31  0.000921518 -0.001466397 #> 2006-09-30 -0.001218862  0.001409431 #> 2006-10-31  0.002819157 -0.008238610 #> 2006-11-30  0.000453412 -0.008646808 #> 2006-12-31  0.001144121 -0.001101976    is.unsorted(reverted) #> [1] FALSE"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-start.html","id":null,"dir":"Reference","previous_headings":"","what":"Start and end of a 'timeSeries' — start","title":"Start and end of a 'timeSeries' — start","text":"Returns start end time stamp \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start and end of a 'timeSeries' — start","text":"","code":"# S4 method for timeSeries start(x, ...)  # S4 method for timeSeries end(x, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start and end of a 'timeSeries' — start","text":"x uni- multivariate \"timeSeries\" object. ... optional arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-start.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start and end of a 'timeSeries' — start","text":"\"timeSeries\" object","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-start.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start and end of a 'timeSeries' — start","text":"","code":"set.seed(1234) ## Create a dummy \\code{\"timeSeries\"} -        tS <- dummyMonthlySeries()[, 1]    tS #> GMT #>                   TS.1 #> 2023-01-01 0.113703411 #> 2023-02-01 0.622299405 #> 2023-03-01 0.609274733 #> 2023-04-01 0.623379442 #> 2023-05-01 0.860915384 #> 2023-06-01 0.640310605 #> 2023-07-01 0.009495756 #> 2023-08-01 0.232550506 #> 2023-09-01 0.666083758 #> 2023-10-01 0.514251141 #> 2023-11-01 0.693591292 #> 2023-12-01 0.544974836     ## Return start and end time stamp -    c(start(tS), end(tS)) #> GMT #> [1] [2023-01-01] [2023-12-01]    range(time(tS)) #> GMT #> [1] [2023-01-01] [2023-12-01]"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-subsetting.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsetting time series — TimeSeriesSubsettings","title":"Subsetting time series — TimeSeriesSubsettings","text":"Objects class \"timeSeries\" can subsetted different   ways.  Methods defined subsetting operators \"$\",   \"[\" assignment versions, well related   functions base R. function drop extract outliers also   described .","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-subsetting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsetting time series — TimeSeriesSubsettings","text":"","code":"# S4 method for timeSeries head(x, n = 6, recordIDs = FALSE, ...) # S4 method for timeSeries tail(x, n = 6, recordIDs = FALSE, ...)  outlier(x, sd = 5, complement = TRUE, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-subsetting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsetting time series — TimeSeriesSubsettings","text":"x object class timeSeries.                    n integer specifying number lines returned.      default n=6. recordIDs logical value. recordIDs returned together     data matrix time series positions? sd numeric value standard deviations, e.g. 10 means values     larger smaller ten times standard deviation     removed series.  complement logical flag. TRUE, default, return series free     outliers. FALSE, return outliers series.         ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-subsetting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subsetting time series — TimeSeriesSubsettings","text":"\"timeSeries\" methods subsetting operators \"$\",   \"[\" assignment versions, well functions   head tail meant user expects. TODO: details needed , despite   paragraph. outlier drops outliers complement = TRUE   returns complement = FALSE. functions described return \"timeSeries\" objects. See also window extracts sub-series   two datetimes.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-subsetting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsetting time series — TimeSeriesSubsettings","text":"functions return object class \"timeSeries\".","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-subsetting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsetting time series — TimeSeriesSubsettings","text":"","code":"## Create an Artificial 'timeSeries' Object -     setRmetricsOptions(myFinCenter = \"GMT\")    charvec <- timeCalendar()    set.seed(4711)    data <- matrix(exp(cumsum(rnorm(12, sd = 0.1))))    tS <- timeSeries(data, charvec, units = \"tS\")    tS #> GMT #>                   tS #> 2023-01-01 1.1995824 #> 2023-02-01 1.3757753 #> 2023-03-01 1.5506114 #> 2023-04-01 1.4887865 #> 2023-05-01 1.4005479 #> 2023-06-01 1.2043889 #> 2023-07-01 1.3069906 #> 2023-08-01 1.1867998 #> 2023-09-01 1.1815277 #> 2023-10-01 1.2389245 #> 2023-11-01 1.1230263 #> 2023-12-01 0.9596526     ## Subset Series by Counts \"[\" -     tS[1:3, ] #> GMT #>                  tS #> 2023-01-01 1.199582 #> 2023-02-01 1.375775 #> 2023-03-01 1.550611         ## Subset the Head of the Series -     head(tS, 6) #> GMT #>                  tS #> 2023-01-01 1.199582 #> 2023-02-01 1.375775 #> 2023-03-01 1.550611 #> 2023-04-01 1.488787 #> 2023-05-01 1.400548 #> 2023-06-01 1.204389"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-t.html","id":null,"dir":"Reference","previous_headings":"","what":"Transpose 'timeSeries' objects — t","title":"Transpose 'timeSeries' objects — t","text":"Returns transpose 'timeSeries' object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose 'timeSeries' objects — t","text":"","code":"# S4 method for timeSeries t(x)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose 'timeSeries' objects — t","text":"x 'timeSeries' object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transpose 'timeSeries' objects — t","text":"matrix object","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/base-t.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transpose 'timeSeries' objects — t","text":"","code":"## Dummy 'timeSeries' with NAs entries    data <- matrix(1:24, ncol = 2)    s <- timeSeries(data, timeCalendar())    s #> GMT #>            TS.1 TS.2 #> 2023-01-01    1   13 #> 2023-02-01    2   14 #> 2023-03-01    3   15 #> 2023-04-01    4   16 #> 2023-05-01    5   17 #> 2023-06-01    6   18 #> 2023-07-01    7   19 #> 2023-08-01    8   20 #> 2023-09-01    9   21 #> 2023-10-01   10   22 #> 2023-11-01   11   23 #> 2023-12-01   12   24     ## Transpose 'timeSeries' -    t(s) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #> TS.1    1    2    3    4    5    6    7    8    9    10    11    12 #> TS.2   13   14   15   16   17   18   19   20   21    22    23    24"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/data-examples.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series data sets — TimeSeriesData","title":"Time series data sets — TimeSeriesData","text":"Three data sets used example files.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/data-examples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time series data sets — TimeSeriesData","text":"following datasets available:  MSFT Daily Microsoft OHLC (Open-high-low-close) prices volume       2000-09-27 2001-09-27. USDCHF USD/CHF intraday foreign exchange rates. LPP2005REC Swiss pension fund assets returns benchmark 2005-11-01       2007-04-11.  datasets objects class \"timeSeries\".","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/data-examples.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Time series data sets — TimeSeriesData","text":"information LPP2005REC available.   meaning columns?","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/data-examples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time series data sets — TimeSeriesData","text":"","code":"## LPP2005 example data set data(LPP2005REC) plot(LPP2005REC, type = \"l\")  class(LPP2005REC) #> [1] \"timeSeries\" #> attr(,\"package\") #> [1] \"timeSeries\" dim(LPP2005REC) #> [1] 377   9 head(LPP2005REC) #> GMT #>                     SBI          SPI          SII          LMI         MPI #> 2005-11-01 -0.000612745  0.008414595 -0.003190926 -0.001108882 0.001548062 #> 2005-11-02 -0.002762009  0.002519342 -0.004117638 -0.001175939 0.000342876 #> 2005-11-03 -0.001153092  0.012707292 -0.005209409 -0.000992456 0.010502959 #> 2005-11-04 -0.003235750 -0.000702757 -0.001127165 -0.001198528 0.011679558 #> 2005-11-07  0.001310970  0.006205226 -0.001795839  0.000360366 0.002709618 #> 2005-11-08  0.000539312  0.000329260  0.002103374  0.002327040 0.000346843 #>                     ALT        LPP25        LPP40        LPP60 #> 2005-11-01 -0.002572971 -0.000130008  0.000199980  0.000809672 #> 2005-11-02 -0.001141604 -0.001561421 -0.001120404 -0.000469730 #> 2005-11-03  0.005007442  0.001541418  0.003317548  0.005731589 #> 2005-11-04  0.009482677  0.000439969  0.002421248  0.004838735 #> 2005-11-07  0.004723952  0.001638182  0.002246611  0.003012363 #> 2005-11-08  0.000853619  0.001087309  0.000962708  0.000828043 LPP2005REC[1:5, 2:4] #> GMT #>                     SPI          SII          LMI #> 2005-11-01  0.008414595 -0.003190926 -0.001108882 #> 2005-11-02  0.002519342 -0.004117638 -0.001175939 #> 2005-11-03  0.012707292 -0.005209409 -0.000992456 #> 2005-11-04 -0.000702757 -0.001127165 -0.001198528 #> 2005-11-07  0.006205226 -0.001795839  0.000360366 range(time(LPP2005REC)) #> GMT #> [1] [2005-11-01] [2007-04-11] summary(LPP2005REC) #> Start Record: 2005-11-01  #> End Record:   2007-04-11  #> Observations: 377  #> Format:       %Y-%m-%d  #> FinCenter:    GMT  #>  #>       SBI                  SPI                  SII             #>  Min.   :-3.770e-03   Min.   :-0.0357462   Min.   :-0.0089887   #>  1st Qu.:-7.644e-04   1st Qu.:-0.0027170   1st Qu.:-0.0015111   #>  Median : 0.000e+00   Median : 0.0010146   Median : 0.0000000   #>  Mean   : 4.070e-07   Mean   : 0.0008418   Mean   : 0.0002389   #>  3rd Qu.: 8.381e-04   3rd Qu.: 0.0049012   3rd Qu.: 0.0018882   #>  Max.   : 3.639e-03   Max.   : 0.0258421   Max.   : 0.0120053   #>       LMI                  MPI                  ALT             #>  Min.   :-3.365e-03   Min.   :-0.0337546   Min.   :-0.0293229   #>  1st Qu.:-7.553e-04   1st Qu.:-0.0029129   1st Qu.:-0.0023254   #>  Median :-9.040e-06   Median : 0.0009263   Median : 0.0010846   #>  Mean   : 5.532e-05   Mean   : 0.0005905   Mean   : 0.0008577   #>  3rd Qu.: 7.935e-04   3rd Qu.: 0.0049005   3rd Qu.: 0.0047719   #>  Max.   : 3.679e-03   Max.   : 0.0240753   Max.   : 0.0167935   #>      LPP25                LPP40                LPP60            #>  Min.   :-0.0078427   Min.   :-0.0137468   Min.   :-0.0214683   #>  1st Qu.:-0.0008146   1st Qu.:-0.0011595   1st Qu.:-0.0016272   #>  Median : 0.0003270   Median : 0.0005369   Median : 0.0007198   #>  Mean   : 0.0002332   Mean   : 0.0003541   Mean   : 0.0005107   #>  3rd Qu.: 0.0012590   3rd Qu.: 0.0019556   3rd Qu.: 0.0030690   #>  Max.   : 0.0054589   Max.   : 0.0089354   Max.   : 0.0135867       ## MSFT example data set data(MSFT) plot(MSFT[, 1:4], type = \"l\")  plot(MSFT[, 5], type = \"h\")  class(MSFT) #> [1] \"timeSeries\" #> attr(,\"package\") #> [1] \"timeSeries\" range(time(MSFT)) #> GMT #> [1] [2000-09-27] [2001-09-27] head(MSFT) #> GMT #>               Open    High     Low   Close   Volume #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 53077800 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 26180200 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 37026800 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 29281200 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 42687000 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 68226700     ## Plot USDCHF example data set data(USDCHF) plot(USDCHF)  range(time(USDCHF)) #> Zurich #> [1] [1996-04-01 00:00:00] [2001-03-30 23:30:00] head(USDCHF) #> Zurich #>                     USDCHF #> 1996-04-01 00:00:00 1.1930 #> 1996-04-01 00:30:00 1.1941 #> 1996-04-01 01:00:00 1.1933 #> 1996-04-01 01:30:00 1.1931 #> 1996-04-01 02:00:00 1.1924 #> 1996-04-01 02:30:00 1.1926"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-align.html","id":null,"dir":"Reference","previous_headings":"","what":"Align a 'timeSeries' object to equidistant time stamps — align-methods","title":"Align a 'timeSeries' object to equidistant time stamps — align-methods","text":"Aligns \"timeSeries\" object equidistant time stamps.    also functions common cases changing daily weekly   daily monthly.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align a 'timeSeries' object to equidistant time stamps — align-methods","text":"","code":"# S4 method for timeSeries align(x, by = \"1d\", offset = \"0s\",     method = c(\"before\", \"after\", \"interp\", \"fillNA\",                \"fmm\", \"periodic\", \"natural\", \"monoH.FC\"),     include.weekends = FALSE, ...)  alignDailySeries(x, method = c(\"before\", \"after\", \"interp\", \"fillNA\",     \"fmm\", \"periodic\", \"natural\", \"monoH.FC\"),     include.weekends = FALSE, units = NULL, zone = \"\",     FinCenter = \"\", ...)  daily2monthly(x, init = FALSE)  daily2weekly(x, startOn = \"Tue\", init = FALSE)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align a 'timeSeries' object to equidistant time stamps — align-methods","text":"x object class \"timeSeries\". character string denoting period. offset character string denoting offset. method method used alignment. character string, one     \"\", use data row whose position just     unmatched position, \"\", use data     row whose position just unmatched position,     \"linear\", interpolate linearly \"\"     \"\".  include.weekends logical value. weekend dates included removed     series?  units optional character string, allows overwrite current     column names timeSeries object. default NULL     means column names selected automatically.  zone time zone financial center data recorded. FinCenter character location  financial center named     \"continent/city\". startOn character string, specifying day week three letter     abbreviation. Weekly aggregated data records fixed     weekdays given argument startOn.  init logical value, set TRUE time series     indexed 1 first value. default init set     FALSE.  ... arguments passed interpolating function.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-align.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Align a 'timeSeries' object to equidistant time stamps — align-methods","text":"TODO: complete. alignDailySeries aligns daily 'timeSeries' new positions,   Effectively, frontend \"timeSeries\" method   align = \"1d\", offset = \"0s\". addition, two tailored functions common cases:   daily2monthly daily2weekly aggregate   \"timeSeries\" objects daily monthly weekly levels,   respectively. case function daily2weekly one can explicitly set   starting day week, default value Tuesday,   startOn = \"Tue\".","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-align.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align a 'timeSeries' object to equidistant time stamps — align-methods","text":"\"timeSeries\" object, alignDailySeries, weekly aligned daily \"timeSeries\" object    daily time series missing holidays.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-align.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align a 'timeSeries' object to equidistant time stamps — align-methods","text":"","code":"## Use Microsofts' OHLCV Price Series -    head(MSFT) #> GMT #>               Open    High     Low   Close   Volume #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 53077800 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 26180200 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 37026800 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 29281200 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 42687000 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 68226700    end(MSFT) #> GMT #> [1] [2001-09-27]  ## Use MSFT and Compute Sample Size -    dim(MSFT) #> [1] 249   5  ## Align the Series -    MSFT.AL <- align(MSFT)  ## Show the Size of the Aligned Series -    dim(MSFT.AL) #> [1] 262   5   ## alignDailySeries  ## Cut out April Data from 2001 -    Close <- MSFT[, \"Close\"]    tsApril01 <- window(Close, start=\"2001-04-01\", end=\"2001-04-30\")    tsApril01 #> GMT #>              Close #> 2001-04-02 55.8125 #> 2001-04-03 53.3750 #> 2001-04-04 51.9375 #> 2001-04-05 56.7500 #> 2001-04-06 56.1875 #> 2001-04-09 57.1500 #> 2001-04-10 59.6800 #> 2001-04-11 60.0400 #> 2001-04-12 62.1800 #> 2001-04-16 60.7900 #> 2001-04-17 61.4800 #> 2001-04-18 65.4300 #> 2001-04-19 68.0400 #> 2001-04-20 69.0000 #> 2001-04-23 68.2500 #> 2001-04-24 67.5500 #> 2001-04-25 69.6900 #> 2001-04-26 69.1300 #> 2001-04-27 67.1200 #> 2001-04-30 67.7500  ## Align Daily Series with NA -    tsRet <- returns(tsApril01, trim = TRUE)    GoodFriday(2001) #> GMT #> [1] [2001-04-13]    EasterMonday(2001) #> GMT #> [1] [2001-04-16]    alignDailySeries(tsRet, method = \"fillNA\", include.weekends = FALSE) #> GMT #>                   Close #> 2001-04-03 -0.044655387 #> 2001-04-04 -0.027301399 #> 2001-04-05  0.088614584 #> 2001-04-06 -0.009961344 #> 2001-04-09  0.016985078 #> 2001-04-10  0.043317566 #> 2001-04-11  0.006014051 #> 2001-04-12  0.035022398 #> 2001-04-13           NA #> 2001-04-16 -0.022608103 #> 2001-04-17  0.011286617 #> 2001-04-18  0.062268950 #> 2001-04-19  0.039114899 #> 2001-04-20  0.014010737 #> 2001-04-23 -0.010929071 #> 2001-04-24 -0.010309370 #> 2001-04-25  0.031188771 #> 2001-04-26 -0.008068045 #> 2001-04-27 -0.029506728 #> 2001-04-30  0.009342398    alignDailySeries(tsRet, method = \"fillNA\", include.weekends = TRUE) #> GMT #>                   Close #> 2001-04-03 -0.044655387 #> 2001-04-04 -0.027301399 #> 2001-04-05  0.088614584 #> 2001-04-06 -0.009961344 #> 2001-04-07           NA #> 2001-04-08           NA #> 2001-04-09  0.016985078 #> 2001-04-10  0.043317566 #> 2001-04-11  0.006014051 #> 2001-04-12  0.035022398 #> 2001-04-13           NA #> 2001-04-14           NA #> 2001-04-15           NA #> 2001-04-16 -0.022608103 #> 2001-04-17  0.011286617 #> 2001-04-18  0.062268950 #> 2001-04-19  0.039114899 #> 2001-04-20  0.014010737 #> 2001-04-21           NA #> 2001-04-22           NA #> 2001-04-23 -0.010929071 #> 2001-04-24 -0.010309370 #> 2001-04-25  0.031188771 #> 2001-04-26 -0.008068045 #> 2001-04-27 -0.029506728 #> 2001-04-28           NA #> 2001-04-29           NA #> 2001-04-30  0.009342398  ## Align Daily Series by Interpolated Values -    alignDailySeries(tsRet, method = \"interp\", include.weekend = FALSE) #> GMT #>                   Close #> 2001-04-03 -0.044655387 #> 2001-04-04 -0.027301399 #> 2001-04-05  0.088614584 #> 2001-04-06 -0.009961344 #> 2001-04-09  0.016985078 #> 2001-04-10  0.043317566 #> 2001-04-11  0.006014051 #> 2001-04-12  0.035022398 #> 2001-04-13  0.020614773 #> 2001-04-16 -0.022608103 #> 2001-04-17  0.011286617 #> 2001-04-18  0.062268950 #> 2001-04-19  0.039114899 #> 2001-04-20  0.014010737 #> 2001-04-23 -0.010929071 #> 2001-04-24 -0.010309370 #> 2001-04-25  0.031188771 #> 2001-04-26 -0.008068045 #> 2001-04-27 -0.029506728 #> 2001-04-30  0.009342398    alignDailySeries(tsRet, method = \"interp\", include.weekend = TRUE) #> GMT #>                    Close #> 2001-04-03 -0.0446553871 #> 2001-04-04 -0.0273013989 #> 2001-04-05  0.0886145837 #> 2001-04-06 -0.0099613441 #> 2001-04-07 -0.0009792034 #> 2001-04-08  0.0080029373 #> 2001-04-09  0.0169850780 #> 2001-04-10  0.0433175657 #> 2001-04-11  0.0060140509 #> 2001-04-12  0.0350223979 #> 2001-04-13  0.0206147727 #> 2001-04-14  0.0062071475 #> 2001-04-15 -0.0082004777 #> 2001-04-16 -0.0226081029 #> 2001-04-17  0.0112866169 #> 2001-04-18  0.0622689502 #> 2001-04-19  0.0391148986 #> 2001-04-20  0.0140107371 #> 2001-04-21  0.0056974679 #> 2001-04-22 -0.0026158013 #> 2001-04-23 -0.0109290705 #> 2001-04-24 -0.0103093697 #> 2001-04-25  0.0311887710 #> 2001-04-26 -0.0080680455 #> 2001-04-27 -0.0295067278 #> 2001-04-28 -0.0165570193 #> 2001-04-29 -0.0036073109 #> 2001-04-30  0.0093423976   ## Load Microsoft Data Set -    x <- MSFT  ## Aggregate daily records to end of month records -    X <- daily2monthly(x)    X #> GMT #>               Open    High     Low   Close   Volume #> 2000-09-30 61.0000 61.3125 58.6250 60.3125 37026800 #> 2000-10-31 69.0000 69.5000 68.0000 68.8750 52237000 #> 2000-11-30 62.0000 62.0625 57.0000 57.3750 98600400 #> 2000-12-31 43.9375 45.8125 43.0000 43.3750 49988800 #> 2001-01-31 63.0000 63.7500 61.0000 61.0625 40949400 #> 2001-02-28 59.5625 60.0781 58.1875 59.0000 42304200 #> 2001-03-31 55.7500 56.1875 53.8750 54.6875 45600800 #> 2001-04-30 68.5300 69.0600 67.6800 67.7500 37184100 #> 2001-05-31 69.4900 70.3800 68.4000 69.1800 35341300 #> 2001-06-30 72.6000 73.4100 71.4000 73.0000 47141900 #> 2001-07-31 66.0100 67.3900 65.8500 66.1900 29515800 #> 2001-08-31 56.8500 58.0600 56.3000 57.0500 28950400 #> 2001-09-30 50.1000 50.6800 48.0000 49.9600 40595600    isMonthly(X) #> [1] TRUE     ## Aggregate daily records to end of week records -    X <- daily2weekly(x, startOn=\"Fri\")    X #> GMT #>               Open    High     Low   Close    Volume #> 2000-09-29 61.0000 61.3125 58.6250 60.3125  37026800 #> 2000-10-06 55.8125 56.7500 54.7500 55.5625  30897000 #> 2000-10-13 53.8750 54.8750 52.1250 53.7500  52260600 #> 2000-10-20 61.3125 66.1250 61.1250 65.1875  80189300 #> 2000-10-27 64.6875 69.1875 64.6250 67.6875  62146200 #> 2000-11-03 69.2500 69.6250 68.0625 68.2500  34355500 #> 2000-11-10 69.9375 70.3125 66.8125 67.3750  46872200 #> 2000-11-17 69.4375 70.0000 67.7969 69.0625  53262800 #> 2000-11-24 69.0000 70.4375 68.5000 69.9375  17219600 #> 2000-12-01 58.0625 60.6250 56.0625 56.6250  54904900 #> 2000-12-08 54.6250 55.8750 53.4375 54.4375  60469900 #> 2000-12-15 51.0469 52.0000 47.7500 49.1875  58449900 #> 2000-12-22 44.7500 47.1250 44.7500 46.4375  54775900 #> 2000-12-29 43.9375 45.8125 43.0000 43.3750  49988800 #> 2001-01-05 48.5000 49.8750 47.5625 49.1250  46707300 #> 2001-01-12 54.8750 55.0000 52.5000 53.5000  36856000 #> 2001-01-19 60.0000 61.4375 58.8750 61.0000 104674400 #> 2001-01-26 61.0000 64.3125 61.0000 64.0000  46540000 #> 2001-02-02 62.5000 63.3750 60.7500 60.8125  35550000 #> 2001-02-09 61.3125 61.5625 58.5000 59.1250  50287600 #> 2001-02-16 57.0000 58.2500 56.1250 57.3125  33479200 #> 2001-02-23 54.4375 57.5000 54.3125 56.7500  46310300 #> 2001-03-02 57.5000 58.1250 56.4375 56.6875  39900400 #> 2001-03-09 57.9375 58.1875 54.8750 56.6875  51897200 #> 2001-03-16 52.5000 55.1250 52.4844 54.5625  56424400 #> 2001-03-23 54.9375 57.0000 54.3750 56.5625  49759800 #> 2001-03-30 55.7500 56.1875 53.8750 54.6875  45600800 #> 2001-04-06 56.3750 57.1875 55.0625 56.1875  46311000 #> 2001-04-13 59.5600 62.3100 59.3500 62.1800  43760000 #> 2001-04-20 70.3000 71.1000 68.5000 69.0000  96459800 #> 2001-04-27 69.5300 69.6800 66.2100 67.1200  60786200 #> 2001-05-04 68.0000 71.0500 67.9600 70.7500  59769200 #> 2001-05-11 69.9600 70.0000 68.6500 69.4000  25564400 #> 2001-05-18 67.6900 69.2000 67.2500 68.0900  45302700 #> 2001-05-25 71.6600 71.9000 70.3600 70.9100  26373800 #> 2001-06-01 69.6000 70.7000 68.7000 70.3400  28793800 #> 2001-06-08 73.7000 73.7500 72.0500 73.1900  25933500 #> 2001-06-15 67.5100 68.3000 66.4000 68.0200  54177200 #> 2001-06-22 70.0000 70.6100 68.5800 68.8300  25546000 #> 2001-06-29 72.6000 73.4100 71.4000 73.0000  47141900 #> 2001-07-06 68.3000 68.4000 65.6700 66.0600  33733900 #> 2001-07-13 71.4000 72.0000 70.9400 71.3400  29467300 #> 2001-07-20 68.0300 69.4000 67.9400 69.1800  62101800 #> 2001-07-27 66.0500 66.2500 65.0500 65.4700  32698000 #> 2001-08-03 67.3000 67.3600 66.0000 66.8900  21630200 #> 2001-08-10 64.7700 65.8600 62.9000 65.5200  25878200 #> 2001-08-17 63.7800 64.1300 61.5000 61.8800  26117100 #> 2001-08-24 59.6000 62.2800 59.2300 62.0500  31699500 #> 2001-08-31 56.8500 58.0600 56.3000 57.0500  28950400 #> 2001-09-07 56.1100 57.3600 55.3100 55.4000  44931900 #> 2001-09-14 54.9200 57.9500 54.7000 57.5800  42235900 #> 2001-09-21 47.9200 50.6000 47.5000 49.7100  92488300    dayOfWeek(time(X)) #> 2000-09-29 2000-10-06 2000-10-13 2000-10-20 2000-10-27 2000-11-03 2000-11-10  #>      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"  #> 2000-11-17 2000-11-24 2000-12-01 2000-12-08 2000-12-15 2000-12-22 2000-12-29  #>      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"  #> 2001-01-05 2001-01-12 2001-01-19 2001-01-26 2001-02-02 2001-02-09 2001-02-16  #>      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"  #> 2001-02-23 2001-03-02 2001-03-09 2001-03-16 2001-03-23 2001-03-30 2001-04-06  #>      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"  #> 2001-04-13 2001-04-20 2001-04-27 2001-05-04 2001-05-11 2001-05-18 2001-05-25  #>      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"  #> 2001-06-01 2001-06-08 2001-06-15 2001-06-22 2001-06-29 2001-07-06 2001-07-13  #>      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"  #> 2001-07-20 2001-07-27 2001-08-03 2001-08-10 2001-08-17 2001-08-24 2001-08-31  #>      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"  #> 2001-09-07 2001-09-14 2001-09-21  #>      \"Fri\"      \"Fri\"      \"Fri\""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-cumulated.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulated time series from returns — cumulated","title":"Cumulated time series from returns — cumulated","text":"Computes cumulated financial \"timeSeries\",      e.g. prices indexes, financial returns.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-cumulated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulated time series from returns — cumulated","text":"","code":"cumulated(x, ...)  # S3 method for default cumulated(x, method = c(\"continuous\", \"discrete\",      \"compound\", \"simple\"), percentage = FALSE, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-cumulated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulated time series from returns — cumulated","text":"method character string naming method returns         computed. percentage logical value. default FALSE, TRUE          series expressed percentage changes. x object class timeSeries. ... arguments passed.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-cumulated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulated time series from returns — cumulated","text":"Note, function cumulated assumes input discrete      returns price index series. cumulatrd      series agrees original price index series.      first values cumulated series computed,     assumed series indexed 1.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-cumulated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulated time series from returns — cumulated","text":"Returns \"timeSeries\" object class     input argument x.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-cumulated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulated time series from returns — cumulated","text":"","code":"## Use the Microsofts' Close Prices Indexed to 1 -     MSFT.CL <- MSFT[, \"Close\"]    MSFT.CL <- MSFT.CL/MSFT[[1, \"Close\"]]    head(MSFT.CL) #> GMT #>                Close #> 2000-09-27 1.0000000 #> 2000-09-28 1.0113402 #> 2000-09-29 0.9948454 #> 2000-10-02 0.9752577 #> 2000-10-03 0.9329897 #> 2000-10-04 0.9144330  ## Compute Discrete Return -        MSFT.RET <- returns(MSFT.CL, method = \"discrete\")     ## Cumulated Series and Compare -     MSFT.CUM <- cumulated(MSFT.RET, method = \"discrete\")     head(cbind(MSFT.CL, MSFT.CUM)) #> GMT #>              Close.1   Close.2 #> 2000-09-27 1.0000000        NA #> 2000-09-28 1.0113402 1.0113402 #> 2000-09-29 0.9948454 0.9948454 #> 2000-10-02 0.9752577 0.9752577 #> 2000-10-03 0.9329897 0.9329897 #> 2000-10-04 0.9144330 0.9144330"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-daily.html","id":null,"dir":"Reference","previous_headings":"","what":"Special daily time series — SpecialDailySeries","title":"Special daily time series — SpecialDailySeries","text":"Special daily 'timeSeries' functions.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-daily.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Special daily time series — SpecialDailySeries","text":"","code":"rollDailySeries(x, period = \"7d\", FUN, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-daily.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Special daily time series — SpecialDailySeries","text":"x object class timeSeries. period character string specifying rollling period composed     length period unit, e.g. \"7d\" represents one     week.  FUN function use aggregation, default colMeans. ... arguments passed interpolating methods.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-daily.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Special daily time series — SpecialDailySeries","text":"rollDailySeries rolls daily 'timeSeries' given period.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-daily.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Special daily time series — SpecialDailySeries","text":"rollDailySeries, object class \"timeSeries\"   rolling values, computed function FUN.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-daily.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Special daily time series — SpecialDailySeries","text":"","code":"## Use Microsofts' OHLCV Price Series -    head(MSFT) #> GMT #>               Open    High     Low   Close   Volume #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 53077800 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 26180200 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 37026800 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 29281200 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 42687000 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 68226700    end(MSFT) #> GMT #> [1] [2001-09-27]  ## Cut out April Data from 2001 -    Close <- MSFT[, \"Close\"]    tsApril01 <- window(Close, start=\"2001-04-01\", end=\"2001-04-30\")    tsApril01 #> GMT #>              Close #> 2001-04-02 55.8125 #> 2001-04-03 53.3750 #> 2001-04-04 51.9375 #> 2001-04-05 56.7500 #> 2001-04-06 56.1875 #> 2001-04-09 57.1500 #> 2001-04-10 59.6800 #> 2001-04-11 60.0400 #> 2001-04-12 62.1800 #> 2001-04-16 60.7900 #> 2001-04-17 61.4800 #> 2001-04-18 65.4300 #> 2001-04-19 68.0400 #> 2001-04-20 69.0000 #> 2001-04-23 68.2500 #> 2001-04-24 67.5500 #> 2001-04-25 69.6900 #> 2001-04-26 69.1300 #> 2001-04-27 67.1200 #> 2001-04-30 67.7500  ## Align Daily Series with NA -    tsRet <- returns(tsApril01, trim = TRUE)    GoodFriday(2001) #> GMT #> [1] [2001-04-13]    EasterMonday(2001) #> GMT #> [1] [2001-04-16]    alignDailySeries(tsRet, method = \"fillNA\", include.weekends = FALSE) #> GMT #>                   Close #> 2001-04-03 -0.044655387 #> 2001-04-04 -0.027301399 #> 2001-04-05  0.088614584 #> 2001-04-06 -0.009961344 #> 2001-04-09  0.016985078 #> 2001-04-10  0.043317566 #> 2001-04-11  0.006014051 #> 2001-04-12  0.035022398 #> 2001-04-13           NA #> 2001-04-16 -0.022608103 #> 2001-04-17  0.011286617 #> 2001-04-18  0.062268950 #> 2001-04-19  0.039114899 #> 2001-04-20  0.014010737 #> 2001-04-23 -0.010929071 #> 2001-04-24 -0.010309370 #> 2001-04-25  0.031188771 #> 2001-04-26 -0.008068045 #> 2001-04-27 -0.029506728 #> 2001-04-30  0.009342398    alignDailySeries(tsRet, method = \"fillNA\", include.weekends = TRUE) #> GMT #>                   Close #> 2001-04-03 -0.044655387 #> 2001-04-04 -0.027301399 #> 2001-04-05  0.088614584 #> 2001-04-06 -0.009961344 #> 2001-04-07           NA #> 2001-04-08           NA #> 2001-04-09  0.016985078 #> 2001-04-10  0.043317566 #> 2001-04-11  0.006014051 #> 2001-04-12  0.035022398 #> 2001-04-13           NA #> 2001-04-14           NA #> 2001-04-15           NA #> 2001-04-16 -0.022608103 #> 2001-04-17  0.011286617 #> 2001-04-18  0.062268950 #> 2001-04-19  0.039114899 #> 2001-04-20  0.014010737 #> 2001-04-21           NA #> 2001-04-22           NA #> 2001-04-23 -0.010929071 #> 2001-04-24 -0.010309370 #> 2001-04-25  0.031188771 #> 2001-04-26 -0.008068045 #> 2001-04-27 -0.029506728 #> 2001-04-28           NA #> 2001-04-29           NA #> 2001-04-30  0.009342398  ## Align Daily Series by Interpolated Values -    alignDailySeries(tsRet, method = \"interp\", include.weekend = FALSE) #> GMT #>                   Close #> 2001-04-03 -0.044655387 #> 2001-04-04 -0.027301399 #> 2001-04-05  0.088614584 #> 2001-04-06 -0.009961344 #> 2001-04-09  0.016985078 #> 2001-04-10  0.043317566 #> 2001-04-11  0.006014051 #> 2001-04-12  0.035022398 #> 2001-04-13  0.020614773 #> 2001-04-16 -0.022608103 #> 2001-04-17  0.011286617 #> 2001-04-18  0.062268950 #> 2001-04-19  0.039114899 #> 2001-04-20  0.014010737 #> 2001-04-23 -0.010929071 #> 2001-04-24 -0.010309370 #> 2001-04-25  0.031188771 #> 2001-04-26 -0.008068045 #> 2001-04-27 -0.029506728 #> 2001-04-30  0.009342398    alignDailySeries(tsRet, method = \"interp\", include.weekend = TRUE) #> GMT #>                    Close #> 2001-04-03 -0.0446553871 #> 2001-04-04 -0.0273013989 #> 2001-04-05  0.0886145837 #> 2001-04-06 -0.0099613441 #> 2001-04-07 -0.0009792034 #> 2001-04-08  0.0080029373 #> 2001-04-09  0.0169850780 #> 2001-04-10  0.0433175657 #> 2001-04-11  0.0060140509 #> 2001-04-12  0.0350223979 #> 2001-04-13  0.0206147727 #> 2001-04-14  0.0062071475 #> 2001-04-15 -0.0082004777 #> 2001-04-16 -0.0226081029 #> 2001-04-17  0.0112866169 #> 2001-04-18  0.0622689502 #> 2001-04-19  0.0391148986 #> 2001-04-20  0.0140107371 #> 2001-04-21  0.0056974679 #> 2001-04-22 -0.0026158013 #> 2001-04-23 -0.0109290705 #> 2001-04-24 -0.0103093697 #> 2001-04-25  0.0311887710 #> 2001-04-26 -0.0080680455 #> 2001-04-27 -0.0295067278 #> 2001-04-28 -0.0165570193 #> 2001-04-29 -0.0036073109 #> 2001-04-30  0.0093423976"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-drawdowns.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculations of drawdowns — drawdowns","title":"Calculations of drawdowns — drawdowns","text":"Compute series drawdowns financial returns      calculate drawdown statisitcs.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-drawdowns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculations of drawdowns — drawdowns","text":"","code":"drawdowns(x, ...)  drawdownsStats(x, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-drawdowns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculations of drawdowns — drawdowns","text":"x \"timeSeries\" object financial returns.           Note, drawdowns can calculated uni- multivariate          time deries object, statistics can computed         univariate time series object. ... optional arguments passed function na.omit.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-drawdowns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculations of drawdowns — drawdowns","text":"drawdowns, object class timeSeries. drawdownsStats object class \"data.frame\" following entries: \"drawdown\" depth drawdown, \"\" start date, \"trough\" trough period, \"\" end date, \"length\" length number records, \"peaktrough\" peak trough, \"recovery\" recovery length number records.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-drawdowns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculations of drawdowns — drawdowns","text":"code core function drawdownsStats     borrowed package PerformanceAnalytics      authored Peter Carl Sankalp Upadhyay.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-drawdowns.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculations of drawdowns — drawdowns","text":"Peter Carl Sankalp Upadhyay code contributed      R package PerformanceAnalytics used function      drawdownsStats.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-drawdowns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculations of drawdowns — drawdowns","text":"","code":"## Use Swiss Pension Fund Data Set of Returns -     head(LPP2005REC) #> GMT #>                     SBI          SPI          SII          LMI         MPI #> 2005-11-01 -0.000612745  0.008414595 -0.003190926 -0.001108882 0.001548062 #> 2005-11-02 -0.002762009  0.002519342 -0.004117638 -0.001175939 0.000342876 #> 2005-11-03 -0.001153092  0.012707292 -0.005209409 -0.000992456 0.010502959 #> 2005-11-04 -0.003235750 -0.000702757 -0.001127165 -0.001198528 0.011679558 #> 2005-11-07  0.001310970  0.006205226 -0.001795839  0.000360366 0.002709618 #> 2005-11-08  0.000539312  0.000329260  0.002103374  0.002327040 0.000346843 #>                     ALT        LPP25        LPP40        LPP60 #> 2005-11-01 -0.002572971 -0.000130008  0.000199980  0.000809672 #> 2005-11-02 -0.001141604 -0.001561421 -0.001120404 -0.000469730 #> 2005-11-03  0.005007442  0.001541418  0.003317548  0.005731589 #> 2005-11-04  0.009482677  0.000439969  0.002421248  0.004838735 #> 2005-11-07  0.004723952  0.001638182  0.002246611  0.003012363 #> 2005-11-08  0.000853619  0.001087309  0.000962708  0.000828043    SPI <- LPP2005REC[, \"SPI\"]    head(SPI) #> GMT #>                     SPI #> 2005-11-01  0.008414595 #> 2005-11-02  0.002519342 #> 2005-11-03  0.012707292 #> 2005-11-04 -0.000702757 #> 2005-11-07  0.006205226 #> 2005-11-08  0.000329260     ## Plot Drawdowns -     dd = drawdowns(LPP2005REC[, \"SPI\"], main = \"Drawdowns\")    plot(dd)     dd = drawdowns(LPP2005REC[, 1:6], main = \"Drawdowns\")    plot(dd)   ## Compute Drawdowns Statistics -     ddStats <- drawdownsStats(SPI)    class(ddStats) #> [1] \"data.frame\"    ddStats #>          From     Trough         To        Depth Length ToTrough Recovery #> 1  2006-05-10 2006-06-13 2006-09-01 -0.123592536     83       25       58 #> 2  2007-02-20 2007-03-14 2007-04-11 -0.077123772     38       17       NA #> 3  2006-11-08 2006-12-01 2006-12-15 -0.040422201     28       18       10 #> 4  2006-01-17 2006-01-25 2006-02-01 -0.019023057     12        7        5 #> 5  2005-12-07 2005-12-15 2005-12-29 -0.018775316     17        7       10 #> 6  2006-02-23 2006-03-08 2006-03-13 -0.018154802     13       10        3 #> 7  2006-09-05 2006-09-11 2006-09-15 -0.015983414      9        5        4 #> 8  2006-10-13 2006-10-17 2006-10-23 -0.014355088      7        3        4 #> 9  2006-04-11 2006-04-18 2006-04-20 -0.013634341      8        6        2 #> 10 2006-10-30 2006-10-31 2006-11-03 -0.012989432      5        2        3 #> 11 2006-04-24 2006-05-03 2006-05-05 -0.012015385     10        8        2 #> 12 2005-11-28 2005-11-30 2005-12-01 -0.011953779      4        3        1 #> 13 2006-09-22 2006-09-25 2006-09-26 -0.011881605      3        2        1 #> 14 2007-01-25 2007-01-26 2007-01-30 -0.011309666      4        2        2 #> 15 2005-11-14 2005-11-16 2005-11-18 -0.010594974      5        3        2 #> 16 2006-02-14 2006-02-15 2006-02-16 -0.010441790      3        2        1 #> 17 2006-03-23 2006-03-28 2006-04-03 -0.009213964      8        4        4 #> 18 2006-12-19 2006-12-22 2006-12-27 -0.008710829      7        4        3 #> 19 2007-01-05 2007-01-08 2007-01-11 -0.007110905      5        2        3 #> 20 2006-01-05 2006-01-10 2006-01-11 -0.006720460      5        4        1 #> 21 2007-02-12 2007-02-13 2007-02-14 -0.006477943      3        2        1 #> 22 2007-02-08 2007-02-08 2007-02-09 -0.006086188      2        1        1 #> 23 2006-02-02 2006-02-02 2006-02-03 -0.005231537      2        1        1 #> 24 2006-10-02 2006-10-02 2006-10-04 -0.005008288      3        1        2 #> 25 2007-01-22 2007-01-23 2007-01-24 -0.004968327      3        2        1 #> 26 2005-12-30 2005-12-30 2006-01-03 -0.003976473      3        1        2 #> 27 2006-10-24 2006-10-24 2006-10-27 -0.003512579      4        1        3 #> 28 2006-12-28 2006-12-29 2007-01-03 -0.003134619      5        2        3 #> 29 2006-04-04 2006-04-04 2006-04-05 -0.002618493      2        1        1 #> 30 2006-09-19 2006-09-19 2006-09-20 -0.002568654      2        1        1 #> 31 2005-11-24 2005-11-24 2005-11-25 -0.002559544      2        1        1 #> 32 2005-11-09 2005-11-09 2005-11-11 -0.002378200      3        1        2 #> 33 2007-01-16 2007-01-16 2007-01-17 -0.002338515      2        1        1 #> 34 2006-03-14 2006-03-15 2006-03-17 -0.002297628      4        2        2 #> 35 2006-02-07 2006-02-08 2006-02-09 -0.001145668      3        2        1 #> 36 2006-02-10 2006-02-10 2006-02-13 -0.001029007      2        1        1 #> 37 2005-11-04 2005-11-04 2005-11-07 -0.000702757      2        1        1 #> 38 2006-03-21 2006-03-21 2006-03-22 -0.000275319      2        1        1 #> 39 2005-12-05 2005-12-05 2005-12-06 -0.000268694      2        1        1 #> 40 2007-01-31 2007-01-31 2007-02-01 -0.000064900      2        1        1 #> 41 2007-01-18 2007-01-18 2007-01-19 -0.000030600      2        1        1     ## Note, Only Univariate Series are allowd -    ddStats <- try(drawdownsStats(LPP2005REC)) #> Error in drawdownsStats(LPP2005REC) : isUnivariate(x) is not TRUE    class(ddStats) #> [1] \"try-error\""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-dummy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create dummy time series — dummyTimeSeries","title":"Create dummy time series — dummyTimeSeries","text":"Create dummy daily monthly time series examples exploration.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-dummy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create dummy time series — dummyTimeSeries","text":"","code":"dummyDailySeries(x = rnorm(365), units = NULL, zone = \"\",                   FinCenter = \"\")  dummyMonthlySeries(...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-dummy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create dummy time series — dummyTimeSeries","text":"x object class timeSeries. units optional character string, allows overwrite current     column names timeSeries object. default NULL     means column names selected automatically.  FinCenter character location financial center named     \"continent/city\".  zone time zone financial center data recorded. ... optional arguments passed timeSeries.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-dummy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create dummy time series — dummyTimeSeries","text":"dummyDailySeries creates timeSeries object   dummy daily dates numeric matrix daily records   unknown dates. dummyMonthlySeries creates dummy monthly \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-dummy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create dummy time series — dummyTimeSeries","text":"\"timeSeries\" object","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-dummy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create dummy time series — dummyTimeSeries","text":"","code":"dd <- dummyDailySeries() head(dd) #> GMT #>                     X1 #> 1970-01-01  0.03533135 #> 1970-01-02  0.42314888 #> 1970-01-03  0.20222884 #> 1970-01-04  1.57620746 #> 1970-01-05 -0.46904286 #> 1970-01-06  0.37957991 tail(dd) #> GMT #>                    X1 #> 1970-12-26 -0.2569257 #> 1970-12-27  0.2426579 #> 1970-12-28  0.1709353 #> 1970-12-29  0.4034617 #> 1970-12-30  1.1048684 #> 1970-12-31 -1.3096252  dummyMonthlySeries(y = 2022) #> GMT #>                   TS.1      TS.2 #> 2023-01-01 0.256204173 0.8121176 #> 2023-02-01 0.881703379 0.9931157 #> 2023-03-01 0.816621071 0.1822492 #> 2023-04-01 0.904131538 0.8045545 #> 2023-05-01 0.306723651 0.5473774 #> 2023-06-01 0.470001841 0.5935642 #> 2023-07-01 0.923688679 0.3782178 #> 2023-08-01 0.585954685 0.2984592 #> 2023-09-01 0.002343502 0.5675508 #> 2023-10-01 0.363293023 0.2742155 #> 2023-11-01 0.803557717 0.7835054 #> 2023-12-01 0.468704748 0.5305348"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-durations.html","id":null,"dir":"Reference","previous_headings":"","what":"Durations from a 'timeSeries' — durations","title":"Durations from a 'timeSeries' — durations","text":"Computes durations object class \"timeSeries\".","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-durations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Durations from a 'timeSeries' — durations","text":"","code":"durations(x, trim = FALSE, units = c(\"secs\", \"mins\", \"hours\", \"days\"))"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-durations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Durations from a 'timeSeries' — durations","text":"x object class timeSeries. trim logical value. default TRUE, first missing          observation return series removed. units character value vector allows set          units durations measured. default durations         measured seconds.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-durations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Durations from a 'timeSeries' — durations","text":"Durations measure long takes get next record     timesSeries object. return time series      time stamp get length period got     last record. period measured length specified     argument units, daily data use units=\"days\".","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-durations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Durations from a 'timeSeries' — durations","text":"returns object class timeSeries.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-durations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Durations from a 'timeSeries' — durations","text":"","code":"## Compute Durations in days for the MSFT Sereries -     head(durations(MSFT, units = \"days\")) #> GMT #>            Duration #> 2000-09-27       NA #> 2000-09-28        1 #> 2000-09-29        1 #> 2000-10-02        3 #> 2000-10-03        1 #> 2000-10-04        1    head(durations(MSFT, trim = TRUE, units = \"days\")) #> GMT #>            Duration #> 2000-09-28        1 #> 2000-09-29        1 #> 2000-10-02        3 #> 2000-10-03        1 #> 2000-10-04        1 #> 2000-10-05        1  ## The same in hours -     head(durations(MSFT, trim = TRUE, units = \"hours\")) #> GMT #>            Duration #> 2000-09-28       24 #> 2000-09-29       24 #> 2000-10-02       72 #> 2000-10-03       24 #> 2000-10-04       24 #> 2000-10-05       24"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-monthly.html","id":null,"dir":"Reference","previous_headings":"","what":"Special monthly series — monthly","title":"Special monthly series — monthly","text":"Functions methods dealing special monthly      \"timeSeries\" objects.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-monthly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Special monthly series — monthly","text":"","code":"rollMonthlyWindows(x, period = \"12m\", by = \"1m\")   rollMonthlySeries(x, period = \"12m\", by = \"1m\", FUN, ...) countMonthlyRecords(x)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-monthly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Special monthly series — monthly","text":"x \"timeSeries\" object. period,character strings specifying rollling period composed     length period unit. Examples: \"3m\"     \"6m\", \"12m\", \"24m\" represent quarterly,     semi-annual, annual bi-annual shifts, respectively.      responsibility user determine proper start series.  FUN function statistic applied. example,     colMean case aggregation.  ... arguments passed function FUN.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-monthly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Special monthly series — monthly","text":"rollMonthlySeries computes statistics defined   function FUN rolling windows, internally computed   function rollMonthlyWindows.  Note, periods may   overlapping, may dense, even may gaps. countMonthlyRecords computes \"timeSeries\" holds   number records month, see examples. dates set   end month. rollMonthlyWindows computes start end dates rolling   time windows. Argument period specifies length   periods FUN applied, gives   amount window shifted. Non-overlapping windows   correspond >= period.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-monthly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Special monthly series — monthly","text":"countMonthlyRecords rollMonthlySeries,   \"timeSeries\" object. rollMonthlyWindows, list attribute \"control\" keeping   start end dates series.   components list : object class \"timeDate\". object class \"timeDate\".","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-monthly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Special monthly series — monthly","text":"","code":"## Load Microsoft Daily Data Set x <- MSFT   ## count monthly records head(x)   # 3 obs. for Sep 2000 #> GMT #>               Open    High     Low   Close   Volume #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 53077800 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 26180200 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 37026800 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 29281200 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 42687000 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 68226700 counts <- countMonthlyRecords(x) counts #> GMT #>            Counts #> 2000-09-30      3 #> 2000-10-31     22 #> 2000-11-30     21 #> 2000-12-31     20 #> 2001-01-31     21 #> 2001-02-28     19 #> 2001-03-31     22 #> 2001-04-30     20 #> 2001-05-31     22 #> 2001-06-30     21 #> 2001-07-31     21 #> 2001-08-31     23  ## diy computation of the counts diy <- rollMonthlySeries(x[ , 1], period = \"1m\", by = \"1m\", FUN = NROW)  ## difference is only in some attributes (e.g. column names) all.equal(diy,  counts) #> [1] \"Names: 1 string mismatch\"                                             #> [2] \"Attributes: < Component “dimnames”: Component 2: 1 string mismatch >\" #> [3] \"Attributes: < Component “units”: 1 string mismatch >\"                      ## quaterly non-overlapping time periods - windows <- rollMonthlyWindows(counts[-1, ], period = \"3m\", by = \"3m\")  windows #> $from #> GMT #> [1] [2000-10-01] [2000-11-01] [2000-12-01] [2001-01-01] [2001-02-01] #> [6] [2001-03-01] [2001-04-01] [2001-05-01] #>  #> $to #> GMT #> [1] [2000-12-31] [2001-01-31] [2001-02-28] [2001-03-31] [2001-04-30] #> [6] [2001-05-31] [2001-06-30] [2001-07-31] #>  #> attr(,\"control\") #> GMT #>        start          end  #> [2000-10-31] [2001-08-31]  ## nicely print results as a data.frame, each row is a time window data.frame(cbind(FROM = format(windows$from), TO = format(windows$to))) #>         FROM         TO #> 1 2000-10-01 2000-12-31 #> 2 2000-11-01 2001-01-31 #> 3 2000-12-01 2001-02-28 #> 4 2001-01-01 2001-03-31 #> 5 2001-02-01 2001-04-30 #> 6 2001-03-01 2001-05-31 #> 7 2001-04-01 2001-06-30 #> 8 2001-05-01 2001-07-31     ## Compute the average number of monthly trading days per quarter -   rollMonthlySeries(counts[-1, ], period = \"3m\", by = \"3m\", FUN = mean) #> GMT #>              Counts #> 2000-12-31 21.00000 #> 2001-01-31 20.66667 #> 2001-02-28 20.00000 #> 2001-03-31 20.66667 #> 2001-04-30 20.33333 #> 2001-05-31 21.33333 #> 2001-06-30 21.00000 #> 2001-07-31 21.33333"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-periodical.html","id":null,"dir":"Reference","previous_headings":"","what":"End-of-Period series, stats, and benchmarks — periodical","title":"End-of-Period series, stats, and benchmarks — periodical","text":"Computes periodical statistics back given period.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-periodical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"End-of-Period series, stats, and benchmarks — periodical","text":"","code":"endOfPeriodSeries(x,      nYearsBack = c(\"1y\", \"2y\", \"3y\", \"5y\", \"10y\", \"YTD\"))  endOfPeriodStats(x,      nYearsBack = c(\"1y\", \"2y\", \"3y\", \"5y\", \"10y\", \"YTD\"))      endOfPeriodBenchmarks(x, benchmark = ncol(x),     nYearsBack = c(\"1y\", \"2y\", \"3y\", \"5y\", \"10y\", \"YTD\"))"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-periodical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"End-of-Period series, stats, and benchmarks — periodical","text":"x end--month recorded multivariate \"timeSeries\" object.     One columns holds benchmark series specified argument     benchmark,  nYearsBack period string. long back series treated? Options     include values 1 year 10 years, year--date: \"1y\",     \"2y\", \"3y\", \"5y\", \"10y\", \"YTD\".  benchmark integer giving position benchmark series     x. default last column x.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-periodical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"End-of-Period series, stats, and benchmarks — periodical","text":"endOfPeriodSeries extract data last years,   specified argument nYearsBack. endOfPeriodStats computes basic exploratory statistics   last years data. endOfPeriodBenchmarks returns benchmarks back given   period. x must end month data. series can created using   functions like align, alignDailySeries,   daily2monthly.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-periodical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"End-of-Period series, stats, and benchmarks — periodical","text":"endOfPeriodSeries, \"timeSeries\", endOfPeriodStats, data frame, endOfPeriodBenchmarks - currently NULL (invisibly),   function unfinished.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-periodical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"End-of-Period series, stats, and benchmarks — periodical","text":"","code":"## Load Series: Column 1:3 Swiss Market, Column 8 (4) Benchmark    x <- 100 * LPP2005REC[, c(1:3, 8)]    colnames(x) #> [1] \"SBI\"   \"SPI\"   \"SII\"   \"LPP40\"    x <- daily2monthly(x)    x #> GMT #>                   SBI        SPI        SII      LPP40 #> 2005-11-30  0.0613921 -0.4037055  0.1711131 -0.1711835 #> 2005-12-31 -0.0456934 -0.3976473 -0.1299026 -0.1363995 #> 2006-01-31 -0.0152952  0.2736095  0.2868720  0.0133349 #> 2006-02-28  0.1071074 -1.1956984  0.1659104 -0.4868522 #> 2006-03-31  0.0232369 -0.0929251 -0.3742188  0.1108179 #> 2006-04-30  0.1330360 -0.2943741  0.2043796 -0.2990218 #> 2006-05-31  0.0233945  0.9323326  0.4888790  0.2653102 #> 2006-06-30 -0.0548353  1.4473814  0.0000000  0.1466710 #> 2006-07-31  0.0077800  0.0267236  0.4459707  0.0642307 #> 2006-08-31  0.0921518 -0.1466397  0.3750473  0.2126960 #> 2006-09-30 -0.1218862  0.1409431  0.3622828  0.0731769 #> 2006-10-31  0.2819157 -0.8238610  0.1611929  0.0018300 #> 2006-11-30  0.0453412 -0.8646808  0.0949359 -0.1401989 #> 2006-12-31  0.1144121 -0.1101976 -0.2031734 -0.0341003 #> 2007-01-31 -0.0306326 -0.0064900  0.0047200 -0.0512010 #> 2007-02-28  0.0380648 -1.1946524 -0.0285334 -0.3741769 #> 2007-03-31 -0.0305670  0.0497094 -0.1809619  0.0943400 #> 2007-04-30  0.0306279 -0.1044170 -0.1339276 -0.0586108     ## Get the Monthly Series -     endOfPeriodSeries(x, nYearsBack=\"1y\") #> GMT #>                   SBI        SPI        SII      LPP40 #> 2006-05-31  0.0233945  0.9323326  0.4888790  0.2653102 #> 2006-06-30 -0.0548353  1.4473814  0.0000000  0.1466710 #> 2006-07-31  0.0077800  0.0267236  0.4459707  0.0642307 #> 2006-08-31  0.0921518 -0.1466397  0.3750473  0.2126960 #> 2006-09-30 -0.1218862  0.1409431  0.3622828  0.0731769 #> 2006-10-31  0.2819157 -0.8238610  0.1611929  0.0018300 #> 2006-11-30  0.0453412 -0.8646808  0.0949359 -0.1401989 #> 2006-12-31  0.1144121 -0.1101976 -0.2031734 -0.0341003 #> 2007-01-31 -0.0306326 -0.0064900  0.0047200 -0.0512010 #> 2007-02-28  0.0380648 -1.1946524 -0.0285334 -0.3741769 #> 2007-03-31 -0.0305670  0.0497094 -0.1809619  0.0943400 #> 2007-04-30  0.0306279 -0.1044170 -0.1339276 -0.0586108     ## Compute the Monthly Statistics -     endOfPeriodStats(x, nYearsBack=\"1y\") #>                        SBI         SPI         SII       LPP40 #> nobs           12.00000000 12.00000000 12.00000000 12.00000000 #> NAs             0.00000000  0.00000000  0.00000000  0.00000000 #> Minimum        -0.12188620 -1.19465240 -0.20317340 -0.37417690 #> Maximum         0.28191570  1.44738140  0.48887900  0.26531020 #> 1. Quartile    -0.03058340 -0.31594502 -0.05488195 -0.05305345 #> 3. Quartile     0.05704385  0.07251783  0.36547392  0.10742275 #> Mean            0.03298057 -0.05448737  0.11553603  0.01666391 #> Median          0.02701120 -0.05545350  0.04982795  0.03303035 #> Sum            -1.16378990 -1.16378990 -1.16378990 -1.16378990 #> SE Mean         0.02923163  0.21051500  0.07163748  0.04916552 #> LCL Mean       -0.03135781 -0.51782776 -0.04213701 -0.09154867 #> UCL Mean        0.09731896  0.40885302  0.27320906  0.12487648 #> Variance        0.01025386  0.53179878  0.06158315  0.02900698 #> Stdev           0.10126133  0.72924535  0.24815952  0.17031435 #> Skewness        0.90313679  0.40555349  0.22273611 -0.65071051 #> Kurtosis        0.61746808 -0.49271933 -1.63160327 -0.06477968 #> worstPeriod    -1.19569840 -1.19569840 -1.19569840 -1.19569840 #> negativeValues 33.00000000 33.00000000 33.00000000 33.00000000 #> positiveValues 38.00000000 38.00000000 38.00000000 38.00000000     ## Compute the Benchmark -     endOfPeriodBenchmarks(x, benchmark=4)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-returns.html","id":null,"dir":"Reference","previous_headings":"","what":"Financial returns — returns","title":"Financial returns — returns","text":"Compute financial returns prices indexes.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-returns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Financial returns — returns","text":"","code":"returns(x, ...) returns0(x, ...)  # S4 method for ANY returns(x, method = c(\"continuous\", \"discrete\",      \"compound\", \"simple\"), percentage = FALSE, ...) # S4 method for timeSeries returns(x, method = c(\"continuous\", \"discrete\",      \"compound\", \"simple\"), percentage = FALSE, na.rm = TRUE,      trim = TRUE, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-returns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Financial returns — returns","text":"x object class timeSeries. percentage logical value. default FALSE, TRUE          series expressed percentage changes. method character string. method used compute         returns, \"continuous\", \"discrete\", \"compound\", \"simple\".         second pair methods synonym first two         methods. na.rm logical value. NAs removed? default TRUE. trim logical value. time series trimmed? Default          TRUE. ... arguments passed.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-returns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Financial returns — returns","text":"functions return object class timeSeries.  returns0 returns untrimmed series first     row returns set zero(s).","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-returns.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Financial returns — returns","text":"functions returnSeries, getReturns longer     exported removed near future. synonyms     function returns use discouraged     many years. Just use returns.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-returns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Financial returns — returns","text":"","code":"## Load Microsoft Data -     setRmetricsOptions(myFinCenter = \"GMT\")    data(MSFT)    X = MSFT[1:10, 1:4]    X #> GMT #>               Open    High     Low   Close #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 #> 2000-10-05 55.5000 57.2500 55.2500 55.3750 #> 2000-10-06 55.8125 56.7500 54.7500 55.5625 #> 2000-10-09 55.6250 55.7500 53.0000 54.1875 #> 2000-10-10 53.9375 55.5625 53.8125 54.5625  ## Continuous Returns -     returns(X) #> GMT #>                    Open         High          Low        Close #> 2000-09-28 -0.042259809 -0.026907453  0.013492680  0.011276388 #> 2000-09-29  0.003078504 -0.009132484 -0.033546122 -0.016444358 #> 2000-10-02 -0.008230499 -0.008188377 -0.006417134 -0.019885532 #> 2000-10-03 -0.015617184 -0.016580691 -0.030503454 -0.044307625 #> 2000-10-04 -0.055000384 -0.055868448 -0.036039936 -0.020089961 #> 2000-10-05 -0.015642777  0.012081421  0.013667639 -0.001128032 #> 2000-10-06  0.005614838 -0.008771986 -0.009090972  0.003380285 #> 2000-10-09 -0.003365118 -0.017778246 -0.032485455 -0.025058259 #> 2000-10-10 -0.030806772 -0.003368897  0.015213869  0.006896579    returns0(X) #> GMT #>                    Open         High          Low        Close #> 2000-09-27  0.000000000  0.000000000  0.000000000  0.000000000 #> 2000-09-28 -0.042259809 -0.026907453  0.013492680  0.011276388 #> 2000-09-29  0.003078504 -0.009132484 -0.033546122 -0.016444358 #> 2000-10-02 -0.008230499 -0.008188377 -0.006417134 -0.019885532 #> 2000-10-03 -0.015617184 -0.016580691 -0.030503454 -0.044307625 #> 2000-10-04 -0.055000384 -0.055868448 -0.036039936 -0.020089961 #> 2000-10-05 -0.015642777  0.012081421  0.013667639 -0.001128032 #> 2000-10-06  0.005614838 -0.008771986 -0.009090972  0.003380285 #> 2000-10-09 -0.003365118 -0.017778246 -0.032485455 -0.025058259 #> 2000-10-10 -0.030806772 -0.003368897  0.015213869  0.006896579    ## Discrete Returns:    returns(X, method = \"discrete\") #> GMT #>                    Open         High          Low        Close #> 2000-09-28 -0.041379310 -0.026548673  0.013584117  0.011340206 #> 2000-09-29  0.003083248 -0.009090909 -0.032989691 -0.016309888 #> 2000-10-02 -0.008196721 -0.008154944 -0.006396588 -0.019689119 #> 2000-10-03 -0.015495868 -0.016443988 -0.030042918 -0.043340381 #> 2000-10-04 -0.053515215 -0.054336468 -0.035398230 -0.019889503 #> 2000-10-05 -0.015521064  0.012154696  0.013761468 -0.001127396 #> 2000-10-06  0.005630631 -0.008733624 -0.009049774  0.003386005 #> 2000-10-09 -0.003359462 -0.017621145 -0.031963470 -0.024746907 #> 2000-10-10 -0.030337079 -0.003363229  0.015330189  0.006920415     ## Don't trim:    returns(X, trim = FALSE) #> GMT #>                    Open         High          Low        Close #> 2000-09-27           NA           NA           NA           NA #> 2000-09-28 -0.042259809 -0.026907453  0.013492680  0.011276388 #> 2000-09-29  0.003078504 -0.009132484 -0.033546122 -0.016444358 #> 2000-10-02 -0.008230499 -0.008188377 -0.006417134 -0.019885532 #> 2000-10-03 -0.015617184 -0.016580691 -0.030503454 -0.044307625 #> 2000-10-04 -0.055000384 -0.055868448 -0.036039936 -0.020089961 #> 2000-10-05 -0.015642777  0.012081421  0.013667639 -0.001128032 #> 2000-10-06  0.005614838 -0.008771986 -0.009090972  0.003380285 #> 2000-10-09 -0.003365118 -0.017778246 -0.032485455 -0.025058259 #> 2000-10-10 -0.030806772 -0.003368897  0.015213869  0.006896579     ## Use Percentage Values:    returns(X, percentage = TRUE, trim = FALSE) #> GMT #>                  Open       High        Low      Close #> 2000-09-27         NA         NA         NA         NA #> 2000-09-28 -4.2259809 -2.6907453  1.3492680  1.1276388 #> 2000-09-29  0.3078504 -0.9132484 -3.3546122 -1.6444358 #> 2000-10-02 -0.8230499 -0.8188377 -0.6417134 -1.9885532 #> 2000-10-03 -1.5617184 -1.6580691 -3.0503454 -4.4307625 #> 2000-10-04 -5.5000384 -5.5868448 -3.6039936 -2.0089961 #> 2000-10-05 -1.5642777  1.2081421  1.3667639 -0.1128032 #> 2000-10-06  0.5614838 -0.8771986 -0.9090972  0.3380285 #> 2000-10-09 -0.3365118 -1.7778246 -3.2485455 -2.5058259 #> 2000-10-10 -3.0806772 -0.3368897  1.5213869  0.6896579"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-runlengths.html","id":null,"dir":"Reference","previous_headings":"","what":"Runlengths of a time series — runlengths","title":"Runlengths of a time series — runlengths","text":"Computes runlengths univariate \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-runlengths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runlengths of a time series — runlengths","text":"","code":"runlengths(x, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-runlengths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runlengths of a time series — runlengths","text":"x univariate time series class \"timeSeries\". ... arguments passed.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-runlengths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runlengths of a time series — runlengths","text":"object class timeSeries.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-runlengths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runlengths of a time series — runlengths","text":"","code":"## random time series -     set.seed(4711)    x <- rnorm(12)    tS <- timeSeries(data=x, charvec=timeCalendar(), units=\"x\")    tS #> GMT #>                      x #> 2023-01-01  1.81973511 #> 2023-02-01  1.37043950 #> 2023-03-01  1.19631824 #> 2023-04-01 -0.40687920 #> 2023-05-01 -0.61097880 #> 2023-06-01 -1.50891205 #> 2023-07-01  0.81754941 #> 2023-08-01 -0.96466789 #> 2023-09-01 -0.04452208 #> 2023-10-01  0.47435474 #> 2023-11-01 -0.98216632 #> 2023-12-01 -1.57211053     ## return runlengths -    runlengths(tS) #> GMT #>            x #> 2023-03-01 3 #> 2023-06-01 3 #> 2023-07-01 1 #> 2023-09-01 2 #> 2023-10-01 1 #> 2023-12-01 2"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-splits.html","id":null,"dir":"Reference","previous_headings":"","what":"splits — splits","title":"splits — splits","text":"Searches outlier splits \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-splits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"splits — splits","text":"","code":"splits(x, sd = 3, complement = TRUE, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-splits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"splits — splits","text":"x \"timeSeries\" object. sd numeric(1); deviations many standard deviations     consider big? Can fractional. E.g., 5 means values     larger smaller five times standard deviation     series detected.  complement logical flag, outlier series complements      returned? ... arguments passed.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-splits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"splits — splits","text":"function finds splits financial price index series.   price index splitted observe big jump several standard   deviations returns, identified usually outlier.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-splits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"splits — splits","text":"\"timeSeries\" object","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-splits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"splits — splits","text":"","code":"## Create a Return Series with a Split -     data <- runif(12, -1, 1)    data[6] <- 20    x <- timeSeries(data, timeCalendar(), units=\"RUNIF\")    x #> GMT #>                  RUNIF #> 2023-01-01  0.02818446 #> 2023-02-01  0.81353192 #> 2023-03-01  0.32781337 #> 2023-04-01 -0.86725243 #> 2023-05-01  0.16026217 #> 2023-06-01 20.00000000 #> 2023-07-01  0.88502200 #> 2023-08-01 -0.99927651 #> 2023-09-01 -0.36096099 #> 2023-10-01 -0.24913208 #> 2023-11-01  0.29574272 #> 2023-12-01 -0.72810981     ## Search for the Split:    splits(x, sd=3, complement=TRUE) #> GMT #>                  RUNIF #> 2023-01-01  0.02818446 #> 2023-02-01  0.81353192 #> 2023-03-01  0.32781337 #> 2023-04-01 -0.86725243 #> 2023-05-01  0.16026217 #> 2023-07-01  0.88502200 #> 2023-08-01 -0.99927651 #> 2023-09-01 -0.36096099 #> 2023-10-01 -0.24913208 #> 2023-11-01  0.29574272 #> 2023-12-01 -0.72810981    splits(x, sd=3, complement=FALSE) #> GMT #>            RUNIF #> 2023-06-01    20"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-spreads.html","id":null,"dir":"Reference","previous_headings":"","what":"Spreads and mid quotes — spreads","title":"Spreads and mid quotes — spreads","text":"Compute spreads midquotes price streams.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-spreads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spreads and mid quotes — spreads","text":"","code":"spreads(x, which = c(\"Bid\", \"Ask\"), tickSize = NULL)     midquotes(x, which = c(\"Bid\", \"Ask\"))  midquoteSeries(...) spreadSeries(...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-spreads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spreads and mid quotes — spreads","text":"tickSize default NULL simply compute price changes original          price levels. ticksize supplied, price changes          divided value inTicksOfSize compute         price changes ticks. vector two character strings naming column names         time series compute mid quotes spreads.         default bid ask prices column names         c(\"Bid\", \"Ask\"). x object class timeSeries. ... arguments passed.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-spreads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spreads and mid quotes — spreads","text":"functions return object class timeSeries.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-spreads.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Spreads and mid quotes — spreads","text":"functions      midquoteSeries spreadSeries synonyms      midquotes spreads, respectively","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-spreads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spreads and mid quotes — spreads","text":"","code":"## Load the Microsoft Data -      setRmetricsOptions(myFinCenter = \"GMT\")    data(MSFT)    X = MSFT[1:10, ]    head(X) #> GMT #>               Open    High     Low   Close   Volume #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 53077800 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 26180200 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 37026800 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 29281200 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 42687000 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 68226700  ## Compute Open/Close Midquotes -    X.MID <- midquotes(X, which = c(\"Close\", \"Open\"))    colnames(X.MID) <- \"X.MID\"    X.MID #> GMT #>               X.MID #> 2000-09-27 62.03125 #> 2000-09-28 61.06250 #> 2000-09-29 60.65625 #> 2000-10-02 59.81250 #> 2000-10-03 58.06250 #> 2000-10-04 55.90625 #> 2000-10-05 55.43750 #> 2000-10-06 55.68750 #> 2000-10-09 54.90625 #> 2000-10-10 54.25000  ## Compute Open/Close Spreads -    X.SPREAD <- spreads(X, which = c(\"Close\", \"Open\"))    colnames(X.SPREAD) <- \"X.SPREAD\"    X.SPREAD #> GMT #>            X.SPREAD #> 2000-09-27   2.8125 #> 2000-09-28  -0.5000 #> 2000-09-29   0.6875 #> 2000-10-02   1.3750 #> 2000-10-03   3.0000 #> 2000-10-04   0.9375 #> 2000-10-05   0.1250 #> 2000-10-06   0.2500 #> 2000-10-09   1.4375 #> 2000-10-10  -0.6250"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-turnpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Turning points of a time series — turns","title":"Turning points of a time series — turns","text":"Extracts analyzes turning points univariate   \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-turnpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turning points of a time series — turns","text":"","code":"turns(x, ...)  turnsStats(x, doplot = TRUE)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-turnpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turning points of a time series — turns","text":"x univariate \"timeSeries\" object financial indices prices. ... optional arguments passed function na.omit. doplot logical flag, results plotted? default TRUE.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-turnpoints.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turning points of a time series — turns","text":"function turns determines number positions   extrema (turning points, either peaks pits) regular time   series. function turnsStats calculates quantity information   associated observations series, according   Kendall's information theory. functions borrowed contributed R package   pastecs made ready working together univariate   timeSeries objects. need load R package   pastecs, code parts need builtin   timeSeries package. renamed function turnpoints turns   distinguish original function contributed R package   pastecs Rmetrics function wrapper. details please consult help page contributed   R package pastecs.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-turnpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turning points of a time series — turns","text":"turns, object class timeSeries. turnsStats, object class turnpoints   following entries: data dataset calculation done. n number observations. points value points series, elimination ex-aequos. pos position points time scale series (including ex-aequos). exaequos Location exaequos (1), (0). nturns Total number turning points whole time series. firstispeak first turning point peak (TRUE), (FALSE). peaks Logical vector. Location peaks time series without ex-aequos. pits Logical vector. Location pits time series without ex-aequos. tppos Position turning points initial series (ex-aequos). proba Probability find turning point location. info Quantity information associated point.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-turnpoints.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Turning points of a time series — turns","text":"Frederic Ibanez Philippe Grosjean code contributed R   package pastecs Rmetrics function wrapper.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-turnpoints.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Turning points of a time series — turns","text":"Ibanez, F., 1982, Sur une nouvelle application de la theorie de    l'information la description des series chronologiques planctoniques.    J. Exp. Mar. Biol. Ecol., 4, 619--632 Kendall, M.G., 1976, Time Series, 2nd ed. Charles Griffin Co, London.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-turnpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turning points of a time series — turns","text":"","code":"## Load Swiss Equities Series -      SPI.RET <- LPP2005REC[, \"SPI\"]    head(SPI.RET) #> GMT #>                     SPI #> 2005-11-01  0.008414595 #> 2005-11-02  0.002519342 #> 2005-11-03  0.012707292 #> 2005-11-04 -0.000702757 #> 2005-11-07  0.006205226 #> 2005-11-08  0.000329260  ## Cumulate and Smooth the Series -    SPI <- smoothLowess(cumulated(SPI.RET), f=0.05)    plot(SPI)      ## Plot Turn Points Series -     SPI.SMOOTH <- SPI[, 2]    tP <- turns(SPI.SMOOTH)    plot(tP)      ## Compute Statistics -    turnsStats(SPI.SMOOTH) #> Turning points for: x  #>  #> nbr observations  : 377  #> nbr ex-aequos     : 0  #> nbr turning points: 14 (first point is a peak) #> E(p) = 250 Var(p) = 66.7 (theoretical) #>  #>    point type         proba      info #> 1     28 peak  2.894020e-32 104.76862 #> 2     34  pit  1.941760e-24  78.76891 #> 3     55 peak  1.370106e-21  69.30620 #> 4     58  pit  9.874935e-31  99.67600 #> 5     85 peak  6.665581e-30  96.92111 #> 6     88  pit  5.157541e-54 177.01743 #> 7    130 peak  2.664544e-90 297.55964 #> 8    163  pit  7.413829e-51 166.52811 #> 9    178 peak  2.069038e-16  52.10189 #> 10   184  pit 1.402003e-137 454.61666 #> 11   271 peak 3.830644e-146 483.06391 #> 12   286  pit  1.471670e-80 265.19679 #> 13   337 peak  7.722581e-84 276.09288 #> 14   355  pit  6.778577e-39 126.79421"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-wealth.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion of an index to wealth — wealth","title":"Conversion of an index to wealth — wealth","text":"Converts index series wealth series normalizing     starting value one.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-wealth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion of an index to wealth — wealth","text":"","code":"index2wealth(x)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-wealth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion of an index to wealth — wealth","text":"x object class 'timeSeries'.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-wealth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion of an index to wealth — wealth","text":"returns time series object class     input argument x normalizing starting     value one.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/fin-wealth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion of an index to wealth — wealth","text":"","code":"## Load MSFT Open Prices  -     INDEX <- MSFT[1:20, 1]    INDEX #> GMT #>               Open #> 2000-09-27 63.4375 #> 2000-09-28 60.8125 #> 2000-09-29 61.0000 #> 2000-10-02 60.5000 #> 2000-10-03 59.5625 #> 2000-10-04 56.3750 #> 2000-10-05 55.5000 #> 2000-10-06 55.8125 #> 2000-10-09 55.6250 #> 2000-10-10 53.9375 #> 2000-10-11 54.0000 #> 2000-10-12 56.3125 #> 2000-10-13 53.8750 #> 2000-10-16 53.5000 #> 2000-10-17 51.8750 #> 2000-10-18 49.6250 #> 2000-10-19 58.4375 #> 2000-10-20 61.3125 #> 2000-10-23 64.6250 #> 2000-10-24 62.6250     ## Compute Wealth Normalized to 100 -     100 * index2wealth(INDEX) #> GMT #>                 Open #> 2000-09-27 100.00000 #> 2000-09-28  95.86207 #> 2000-09-29  96.15764 #> 2000-10-02  95.36946 #> 2000-10-03  93.89163 #> 2000-10-04  88.86700 #> 2000-10-05  87.48768 #> 2000-10-06  87.98030 #> 2000-10-09  87.68473 #> 2000-10-10  85.02463 #> 2000-10-11  85.12315 #> 2000-10-12  88.76847 #> 2000-10-13  84.92611 #> 2000-10-16  84.33498 #> 2000-10-17  81.77340 #> 2000-10-18  78.22660 #> 2000-10-19  92.11823 #> 2000-10-20  96.65025 #> 2000-10-23 101.87192 #> 2000-10-24  98.71921"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/internals.html","id":null,"dir":"Reference","previous_headings":"","what":"Exported internal functions — internals","title":"Exported internal functions — internals","text":"Internal functions still exported packages   using . intent stop exporting removing .","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/internals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exported internal functions — internals","text":"think functions useful   exported analogs, please contact maintainer.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-as.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert objects to/from class 'timeSeries' — as","title":"Convert objects to/from class 'timeSeries' — as","text":"Functions methods dealing coercion \"timeSeries\"   classes.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-as.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert objects to/from class 'timeSeries' — as","text":"","code":"## convert to 'timeSeries' as.timeSeries(x, ...)  ## convert from 'timeSeries' to other classes # S4 method for timeSeries as.matrix(x, ...) # S4 method for timeSeries as.ts(x, ...) # S4 method for timeSeries as.data.frame(x, row.names = NULL, optional = FALSE, ...) # S4 method for timeSeries as.list(x, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-as.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert objects to/from class 'timeSeries' — as","text":"x object converted, see Section ‘Details’         special case class(x) \"character\". row.names NULL character vector giving row names         data frame. Missing values allowed. optional logical value. TRUE, setting row names converting         column names (syntactic names) optional. ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-as.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert objects to/from class 'timeSeries' — as","text":"Functions create \"timeSeries\" objects objects   convert \"timeSeries\" objects classes. .timeSeries generic function convert object   \"timeSeries\".  specialised methods following   classes: \"ts\", \"data.frame\", \"character\",   \"zoo\". default method equivalent calling   \"timeSeries()\", x can type   \"timeSeries()\" accepts. character method .timeSeries special,   contents parsed evaluated, .timeSeries   called returned value (passing also \"...\"   arguments. Care needed avoid infinite recursion since   currently code guard .","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-as.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert objects to/from class 'timeSeries' — as","text":".timeSeries, object class \"timeSeries\". .numeric, .data.frame, .matrix,  .ts, .list -  numeric vector, data frame,   matrix, object class ts, \"list\",   respectively.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-as.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert objects to/from class 'timeSeries' — as","text":"","code":"## Create an Artificial 'timeSeries' Object setRmetricsOptions(myFinCenter = \"GMT\") charvec <- timeCalendar() data <- matrix(rnorm(12)) TS <- timeSeries(data, charvec, units = \"RAND\") TS #> GMT #>                   RAND #> 2023-01-01 -0.53462554 #> 2023-02-01  1.03171730 #> 2023-03-01  0.70956662 #> 2023-04-01  0.07844901 #> 2023-05-01  0.97608044 #> 2023-06-01 -0.26208703 #> 2023-07-01 -1.37029646 #> 2023-08-01  0.19624484 #> 2023-09-01 -1.21235565 #> 2023-10-01 -0.15885573 #> 2023-11-01 -0.66830348 #> 2023-12-01  0.88260316  ## Coerce to Vector as.vector(TS) #>  [1] -0.53462554  1.03171730  0.70956662  0.07844901  0.97608044 -0.26208703 #>  [7] -1.37029646  0.19624484 -1.21235565 -0.15885573 -0.66830348  0.88260316     ## Coerce to Matrix as.matrix(TS) #>                   RAND #> 2023-01-01 -0.53462554 #> 2023-02-01  1.03171730 #> 2023-03-01  0.70956662 #> 2023-04-01  0.07844901 #> 2023-05-01  0.97608044 #> 2023-06-01 -0.26208703 #> 2023-07-01 -1.37029646 #> 2023-08-01  0.19624484 #> 2023-09-01 -1.21235565 #> 2023-10-01 -0.15885573 #> 2023-11-01 -0.66830348 #> 2023-12-01  0.88260316    ## Coerce to Data Frame as.data.frame(TS) #>                   RAND #> 2023-01-01 -0.53462554 #> 2023-02-01  1.03171730 #> 2023-03-01  0.70956662 #> 2023-04-01  0.07844901 #> 2023-05-01  0.97608044 #> 2023-06-01 -0.26208703 #> 2023-07-01 -1.37029646 #> 2023-08-01  0.19624484 #> 2023-09-01 -1.21235565 #> 2023-10-01 -0.15885573 #> 2023-11-01 -0.66830348 #> 2023-12-01  0.88260316"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-base.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for 'timeSeries' object — base-methods","title":"Methods for 'timeSeries' object — base-methods","text":"Methods function Package `base' timeSeries object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-base.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Methods for 'timeSeries' object — base-methods","text":"x = \"timeSeries\" timeSeries object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-base.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for 'timeSeries' object — base-methods","text":"","code":"## None -"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-comment.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set comments for 'timeSeries' objects — comment","title":"Get and set comments for 'timeSeries' objects — comment","text":"Get assign new comment timeSeries object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-comment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set comments for 'timeSeries' objects — comment","text":"","code":"# S4 method for timeSeries comment(x) # S4 method for timeSeries comment(x) <- value"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-comment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set comments for 'timeSeries' objects — comment","text":"x timeSeries object. value character vector, comment.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-comment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and set comments for 'timeSeries' objects — comment","text":"Objects class \"timeSeries\" slot documentation.   functions get change contents.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-comment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set comments for 'timeSeries' objects — comment","text":"","code":"## Get description from a 'timeSeries' -    comment(LPP2005REC) #> [1] \"Thu Aug 27 17:27:15 2009\"     ## Add User to comment -    comment(LPP2005REC) <- paste(comment(LPP2005REC), \"by User Rmetrics\")    comment(LPP2005REC) #> [1] \"Thu Aug 27 17:27:15 2009 by User Rmetrics\""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-is.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is from class 'timeSeries' — is.timeSeries","title":"Check if an object is from class 'timeSeries' — is.timeSeries","text":".timeSeries tests argument timeSeries.   .timeSeries tests series timestamps.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-is.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is from class 'timeSeries' — is.timeSeries","text":"","code":"is.timeSeries(x) is.signalSeries(x)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-is.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is from class 'timeSeries' — is.timeSeries","text":"x object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-is.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is from class 'timeSeries' — is.timeSeries","text":"TRUE FALSE depending whether     argument object class \"timeSeries\" .","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-is.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is from class 'timeSeries' — is.timeSeries","text":"","code":"## Create an artificial 'timeSeries' object -     setRmetricsOptions(myFinCenter = \"GMT\")    charvec <- timeCalendar()    data <- matrix(rnorm(12))    TS <- timeSeries(data, charvec, units = \"RAND\")    TS #> GMT #>                    RAND #> 2023-01-01  0.218294507 #> 2023-02-01  1.765548038 #> 2023-03-01  1.142419102 #> 2023-04-01 -0.591197334 #> 2023-05-01 -0.617830511 #> 2023-06-01 -0.761016948 #> 2023-07-01 -0.287532357 #> 2023-08-01 -2.559374272 #> 2023-09-01 -1.839761220 #> 2023-10-01  1.672603722 #> 2023-11-01 -1.272653368 #> 2023-12-01  0.001369812  ## Test for 'timeSeries' -     is.timeSeries(TS) #> [1] TRUE"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-mathOps.html","id":null,"dir":"Reference","previous_headings":"","what":"Mathematical operations on 'timeSeries' — math","title":"Mathematical operations on 'timeSeries' — math","text":"Functions methods mathematical operations \"timeSeries\".","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-mathOps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mathematical operations on 'timeSeries' — math","text":"","code":"# S4 method for timeSeries,timeSeries Ops(e1, e2) # S4 method for timeSeries Math(x) # S4 method for timeSeries Math2(x, digits)  # S4 method for timeSeries quantile(x, ...) # S4 method for timeSeries median(x, na.rm = FALSE, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-mathOps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mathematical operations on 'timeSeries' — math","text":"x object class timeSeries.                digits number digits used 'round' 'signif'. e1, e2 least one two objects class \"timeSeries\"     (methods described page).       na.rm logical value: missing values removed?                  ... arguments passed.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-mathOps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mathematical operations on 'timeSeries' — math","text":"methods Math Math2 groups   mathematical functions return 'timeSeries' objects. work   element-wise data part time series exception   cummin, cummax, cumsum, cumprod   work columnwise. Ops group includes mathematical operators. binary   operators methods defined pairs least one 'timeSeries'   object.  work expected data parts arguments.   operation gives value dimension data part   'timeSeries' object, replaces original data   object. also methods quantile median.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-mathOps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mathematical operations on 'timeSeries' — math","text":"value mathematical logical operation operating   objects class \"timeSeries\" value computed   mathematical function.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-mathOps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mathematical operations on 'timeSeries' — math","text":"","code":"## Create an Artificial 'timeSeries' Object -     setRmetricsOptions(myFinCenter = \"GMT\")    charvec = timeCalendar()    set.seed(4711)    data = matrix(exp(cumsum(rnorm(12, sd = 0.1))))    TS = timeSeries(data, charvec, units = \"TS\")    TS #> GMT #>                   TS #> 2023-01-01 1.1995824 #> 2023-02-01 1.3757753 #> 2023-03-01 1.5506114 #> 2023-04-01 1.4887865 #> 2023-05-01 1.4005479 #> 2023-06-01 1.2043889 #> 2023-07-01 1.3069906 #> 2023-08-01 1.1867998 #> 2023-09-01 1.1815277 #> 2023-10-01 1.2389245 #> 2023-11-01 1.1230263 #> 2023-12-01 0.9596526  ## Mathematical Operations: | +/- * ^ ... -     TS^2 #> GMT #>                  TS #> 2023-01-01 1.438998 #> 2023-02-01 1.892758 #> 2023-03-01 2.404396 #> 2023-04-01 2.216485 #> 2023-05-01 1.961534 #> 2023-06-01 1.450553 #> 2023-07-01 1.708224 #> 2023-08-01 1.408494 #> 2023-09-01 1.396008 #> 2023-10-01 1.534934 #> 2023-11-01 1.261188 #> 2023-12-01 0.920933    TS[2:4] #> [1] 1.375775 1.550611 1.488787    OR = returns(TS)    OR #> GMT #>                      TS #> 2023-02-01  0.137043950 #> 2023-03-01  0.119631824 #> 2023-04-01 -0.040687920 #> 2023-05-01 -0.061097880 #> 2023-06-01 -0.150891205 #> 2023-07-01  0.081754941 #> 2023-08-01 -0.096466789 #> 2023-09-01 -0.004452208 #> 2023-10-01  0.047435474 #> 2023-11-01 -0.098216632 #> 2023-12-01 -0.157211053    OR > 0 #> GMT #>               TS #> 2023-02-01  TRUE #> 2023-03-01  TRUE #> 2023-04-01 FALSE #> 2023-05-01 FALSE #> 2023-06-01 FALSE #> 2023-07-01  TRUE #> 2023-08-01 FALSE #> 2023-09-01 FALSE #> 2023-10-01  TRUE #> 2023-11-01 FALSE #> 2023-12-01 FALSE"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot 'timeSeries' objects — plot-methods","title":"Plot 'timeSeries' objects — plot-methods","text":"\"timeSeries\" methods plot,   lines points.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot 'timeSeries' objects — plot-methods","text":"","code":"# S4 method for timeSeries plot(x, y, FinCenter = NULL,     plot.type = c(\"multiple\", \"single\"), format = \"auto\",     at = pretty(x), widths = 1, heights = 1, xy.labels,     xy.lines, panel = lines, nc, yax.flip = FALSE,     mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),     oma.multi = c(6, 0, 5, 0), axes = TRUE, ...)  # S4 method for timeSeries lines(x, FinCenter = NULL, ...) # S4 method for timeSeries points(x, FinCenter = NULL, ...)  # S3 method for timeSeries pretty(x, n=5, min.n=n%/%3, shrink.sml=0.75,     high.u.bias=1.5, u5.bias=0.5+1.5*high.u.bias, eps.correct=0, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot 'timeSeries' objects — plot-methods","text":"original method plot build along R's plotting function   plot.ts additional argument tailor position   marks user defined position specified argument .   call style theme \"ts\". verson R 3.1 inroduced two new additional plotting themes   called \"pretty\" \"chick\". becoming active   set = \"pretty\" = \"chic\". Plot style theme \"pretty\" extension original   plotting method. Plot style theme \"chic\" implementation along   contributed packages xts PerformanceAnalytics   Chicago finance group members (\"chic\" abbreviation   Chicago. themes, \"pretty\" \"chic\", additional   arguments passed ... arguments. :  Concerning plot elements, length vectors   number columns time series plotted.   length one, repeated. almost 70 pages vignette added package, dozens   examples tailored plots. look .","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot 'timeSeries' objects — plot-methods","text":"x, y objects class timeSeries. FinCenter character location  financial center         named \"continent/city\". plot.type multivariate time series, series plotted         separately (common time axis) single plot? format POSIX label format, e.g. \"%Y-%m-%d\" \"%F\"         ISO-8601 standard date format. timeDate object setting plot label positions.         =pretty(x), postitions generated automatized         calling function pretty. Default option =\"auto\"          selects 6 equal spaced time label positions. new plot         themes set =\"pretty\" =\"chic\". case additional         arguments can passed ... arguments,         see details. widths, heights widths heights individual graphs, see layout. xy.labels logical, indicating text() labels used         x-y plot, _or_ character, supplying vector labels         used.  default label 150 points,         . xy.lines logical, indicating lines drawn x-y         plot.  Defaults value xy.labels         logical, otherwise TRUE panel function(x, col, bg, pch, type, ...) gives         action carried panel display         plot.type=\"multiple\".  default lines. nc number columns use type=\"multiple\". Defaults         1 4 series, otherwise 2. yax.flip logical indicating y-axis (ticks numbering)         flip side 2 (left) 4 (right) series series         type=\"multiple\". mar.multi, oma.multi (default) par settings plot.type=\"multiple\". axes logical indicating x- y- axes drawn. n integer giving desired number intervals. min.n nonnegative integer giving minimal         number intervals. shrink.sml positive numeric default         scale shrunk case range(x)         small. high.u.bias non-negative numeric, typically > 1.         Larger high.u.bias values favor larger units. u5.bias non-negative numeric multiplier favoring         factor 5 2. eps.correct integer code, one 0,1,2.        non-0, correction made boundaries. ... additional graphical arguments, see plot, plot.default        par.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot 'timeSeries' objects — plot-methods","text":"NULL (invisibly), functions called side effect   producing plots","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot 'timeSeries' objects — plot-methods","text":"","code":"## Load Swiss Pension Fund Benchmark Data -    LPP <- LPP2005REC[1:12, 1:4]    colnames(LPP) <- abbreviate(colnames(LPP), 2)    finCenter(LPP) <- \"GMT\"  ## Example Plot 1 -    plot(LPP[, 1], type = \"o\", col = \"steelblue\",      main = \"LPP\", xlab = \"2005\", ylab = \"Return\")     plot(LPP[, 1], at=\"auto\", type = \"o\", col = \"steelblue\",      main = \"LPP\", xlab = \"2005\", ylab = \"Return\")   ## Example Plot 2 -    plot(LPP[, 1:2], type = \"o\", col = \"steelblue\",      main = \"LPP\", xlab = \"2005\", ylab = \"Return\")   ## Example Plot 3 -    plot(LPP[, 1], LPP[, 2], type = \"p\", col = \"steelblue\",      main = \"LPP\", xlab = \"Return 1\", ylab = \"Return 2\")   ## Example Plot 4a, The Wrong Way to do it! -    LPP <- as.timeSeries(data(LPP2005REC))    ZRH <- as.timeSeries(LPP[,\"SPI\"], zone = \"Zurich\", FinCenter = \"Zurich\")    NYC <- as.timeSeries(LPP[,\"LMI\"], zone = \"NewYork\", FinCenter = \"NewYork\")    finCenter(ZRH) #> [1] \"Zurich\"    finCenter(NYC) #> [1] \"NewYork\"    plot(ZRH, at=\"auto\", type = \"p\", pch = 19, col = \"blue\")    points(NYC, pch = 19, col = \"red\")   ## Example Plot 4b, Convert NYC to Zurich Time -    finCenter(ZRH) <- \"Zurich\"    finCenter(NYC) <- \"Zurich\"    at <- unique(round(time(ZRH)))    plot(ZRH, type = \"p\", pch = 19, col = \"blue\", format = \"%b %d\", at = at,        xlab = paste(ZRH@FinCenter, \"local Time\"), main = ZRH@FinCenter)    points(NYC, pch = 19, col = \"red\")   ## Example 4c, Force Everything to GMT Using \"FinCenter\" Argument -    finCenter(ZRH) <- \"Zurich\"    finCenter(NYC) <- \"NewYork\"    at <- unique(round(time(ZRH)))    plot(ZRH, type = \"p\", pch = 19, col = \"blue\", format = \"%b %d\", at = at,        FinCenter = \"GMT\", xlab = \"GMT\", main = \"ZRH - GMT\")    points(NYC, FinCenter = \"GMT\", pch = 19, col = \"red\")"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-show.html","id":null,"dir":"Reference","previous_headings":"","what":"Print 'timeSeries' objects — print-methods","title":"Print 'timeSeries' objects — print-methods","text":"Print \"timeSeries\" objects.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print 'timeSeries' objects — print-methods","text":"","code":"# S4 method for timeSeries show(object)  # S4 method for timeSeries print(x, FinCenter = NULL, format = NULL,           style = c(\"tS\", \"h\", \"ts\"), by = c(\"month\", \"quarter\"), ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print 'timeSeries' objects — print-methods","text":"object,x object class timeSeries. FinCenter character location  financial center named      \"continent/city\". format format specification input character vector,     character string format POSIX notation. style character string, one \"tS\", \"h\", \"ts\". character string, one \"month\", \"quarter\". ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-show.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print 'timeSeries' objects — print-methods","text":"show additional arguments. print method allows modify way object shown   explicitly calling print. default style tS. univariate time series   style = \"h\" causes object printed vector   time stamps labels. Finally, style = \"ts\" prints   like objects base R class \"ts\". last value suitable   quarterly monthly time series.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print 'timeSeries' objects — print-methods","text":"Prints object class timeSeries.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-show.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print 'timeSeries' objects — print-methods","text":"","code":"## Load Micsrosoft Data -     setRmetricsOptions(myFinCenter = \"GMT\")    LPP <- MSFT[1:12, 1:4]  ## Abbreviate Column Names -     colnames(LPP) <- abbreviate(colnames(LPP), 6)     ## Print Data Set -    print(LPP) #> GMT  #>               Open    High     Low   Close #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 #> 2000-10-05 55.5000 57.2500 55.2500 55.3750 #> 2000-10-06 55.8125 56.7500 54.7500 55.5625 #> 2000-10-09 55.6250 55.7500 53.0000 54.1875 #> 2000-10-10 53.9375 55.5625 53.8125 54.5625 #> 2000-10-11 54.0000 56.9375 54.0000 55.7500 #> 2000-10-12 56.3125 56.8750 53.8125 54.3750     ## Alternative Use, Show Data Set -     show(LPP) #> GMT #>               Open    High     Low   Close #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 #> 2000-10-05 55.5000 57.2500 55.2500 55.3750 #> 2000-10-06 55.8125 56.7500 54.7500 55.5625 #> 2000-10-09 55.6250 55.7500 53.0000 54.1875 #> 2000-10-10 53.9375 55.5625 53.8125 54.5625 #> 2000-10-11 54.0000 56.9375 54.0000 55.7500 #> 2000-10-12 56.3125 56.8750 53.8125 54.3750  ## a short subseries to demo 'print'    hC <- head(MSFT[ , \"Close\"])    class(hC) #> [1] \"timeSeries\" #> attr(,\"package\") #> [1] \"timeSeries\"    print(hC) #> GMT  #>              Close #> 2000-09-27 60.6250 #> 2000-09-28 61.3125 #> 2000-09-29 60.3125 #> 2000-10-02 59.1250 #> 2000-10-03 56.5625 #> 2000-10-04 55.4375    print(hC, style = \"h\") #> 2000-09-27 2000-09-28 2000-09-29 2000-10-02 2000-10-03 2000-10-04  #>    60.6250    61.3125    60.3125    59.1250    56.5625    55.4375"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Base R functions applied to 'timeSeries' objects — timeSeries-method-stats","title":"Base R functions applied to 'timeSeries' objects — timeSeries-method-stats","text":"Many base R statistical functions work (data part )   timeSeries objects without need special methods, e.g.,   var, sd, cov, cor, probability densities,   others. page gives examples functions.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/methods-stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base R functions applied to 'timeSeries' objects — timeSeries-method-stats","text":"","code":"## Load Microsoft Data Set -     data(MSFT)    X = MSFT[, 1:4]    X = 100 * returns(X)  ## Compute Covariance Matrix -     cov(X[, \"Open\"], X[, \"Close\"]) #>         Close #> Open 5.370449    cov(X) #>            Open     High       Low     Close #> Open  12.024989 7.717341  9.072359  5.370449 #> High   7.717341 8.566159  8.007279  7.931451 #> Low    9.072359 8.007279 10.543072  8.505720 #> Close  5.370449 7.931451  8.505720 11.676740  cor(X)    #>            Open      High       Low     Close #> Open  1.0000000 0.7603828 0.8057388 0.4532183 #> High  0.7603828 1.0000000 0.8425745 0.7930467 #> Low   0.8057388 0.8425745 1.0000000 0.7665963 #> Close 0.4532183 0.7930467 0.7665963 1.0000000"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-colCumsums.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulated Column Statistics — colCum","title":"Cumulated Column Statistics — colCum","text":"Functions compute cumulative column statistics.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-colCumsums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulated Column Statistics — colCum","text":"","code":"# S4 method for timeSeries colCumsums(x, na.rm = FALSE, ...)  # S4 method for timeSeries colCummaxs(x, na.rm = FALSE, ...)  # S4 method for timeSeries colCummins(x, na.rm = FALSE, ...)  # S4 method for timeSeries colCumprods(x, na.rm = FALSE, ...)  # S4 method for timeSeries colCumreturns(x, method = c(\"geometric\", \"simple\"),                                      na.rm = FALSE, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-colCumsums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulated Column Statistics — colCum","text":"x time series, may object class \"matrix\",     \"timeSeries\".  na.rm logical. missing values removed? method character string indicate geometric (TRUE) simple     (FALSE) returns computed.  ... arguments passed.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-colCumsums.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulated Column Statistics — colCum","text":"functions compute requested cumulative quantities columnwise   obtain matrix dimension data.    \"timeSeries\" methods replace data part original   object resulting matrix. \"timeSeries\" methods Math group functions   cummin, cummax, cumsum, cumprod,    work similarly na.rm argument.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-colCumsums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulated Column Statistics — colCum","text":"\"matrix\" default methods functions,  \"timeSeries\"  \"timeSeries\" methods","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-colCumsums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulated Column Statistics — colCum","text":"","code":"## simulate return data x <- matrix(rnorm(24), ncol = 2) X <- as.timeSeries(x)       ## cumulative sums  by column  - class(colCumsums(x))  # \"matrix\" #> [1] \"matrix\" \"array\"  class(colCumsums(X))  # \"timeSeries\" #> [1] \"timeSeries\" #> attr(,\"package\") #> [1] \"timeSeries\"  colCumsums(X) #>  #>             SS.1       SS.2 #>  [1,] 0.03533135 -1.3702965 #>  [2,] 0.45848023 -1.1740516 #>  [3,] 0.66070907 -2.3864073 #>  [4,] 2.23691652 -2.5452630 #>  [5,] 1.76787366 -3.2135665 #>  [6,] 2.14745357 -2.3309633 #>  [7,] 1.61282804 -2.1126688 #>  [8,] 2.64454534 -0.3471208 #>  [9,] 3.35411196  0.7952983 #> [10,] 3.43256097  0.2041010 #> [11,] 4.40864141 -0.4137295 #> [12,] 4.14655437 -1.1747465"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-colSums.html","id":null,"dir":"Reference","previous_headings":"","what":"Column statistics — colStats","title":"Column statistics — colStats","text":"collection functions compute column statistical properties   financial economic time series data.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-colSums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column statistics — colStats","text":"","code":"colStats(x, FUN, ...)   colSds(x, ...) colVars(x, ...) colSkewness(x, ...) colKurtosis(x, ...) colMaxs(x, ...) colMins(x, ...) colProds(x, ...) colQuantiles(x, prob = 0.05, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-colSums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column statistics — colStats","text":"x rectangular object can transformed matrix     function .matrix. FUN function name, statistical function applied. prob numeric value [0,1]. ... arguments passed.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-colSums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Column statistics — colStats","text":"function returns numeric vector statistics, one   column","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-colSums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Column statistics — colStats","text":"","code":"## Simulated Return Data in Matrix Form -    x = matrix(rnorm(252), ncol = 2)       ## Mean Columnwise Statistics -    colStats(x, FUN = mean) #> [1] -0.08011812 -0.06498521     ## Quantiles Column by Column -    colQuantiles(x, prob = 0.10, type = 1)   #> [1] -1.342956 -1.275966"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-orderColnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder column names of a time series — orderColnames","title":"Reorder column names of a time series — orderColnames","text":"Functions methods dealing rearrangement     column names 'timeSeries' objects.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-orderColnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder column names of a time series — orderColnames","text":"","code":"orderColnames(x, ...) sortColnames(x, ...)   sampleColnames(x, ...)  statsColnames(x, FUN = colMeans, ...) pcaColnames(x, robust = FALSE, ...) hclustColnames(x, method = c(\"euclidean\", \"complete\"), ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-orderColnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder column names of a time series — orderColnames","text":"x object class timesSeries rectangular     object can transformed function .matrix     numeric matrix.  FUN character string indicating statistical function     applied. default statistical ordering operates column     means time series.  method character string two elements. first determines     choice distance measure, see dist,     second determines choice agglomeration method, see     hclust.  robust logical flag indicates robust correlations     used.  ... arguments passed underlying functions     main work, see section ‘Details’.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-orderColnames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorder column names of a time series — orderColnames","text":"functions reorder column names \"timeSeries\"   object according statistical measure. Statistically Motivated Rearrangement function statsColnames rearranges column names     according statical measure. measure must operate     columns time series return vector values can     sorted. Typical functions ar listed help page     colStats custom functions can used compute     example risk statistical measure. ...     argument allows pass additional arguments underlying     function FUN. PCA Ordering Correlation Matrix function pcaColnames rearranges column names     according PCA ordered correlation matrix. argument     robust allsows select use standard     cor computation robust correlations using      function covMcd contributed R package     robustbase. ... argument allows pass      additional arguments two underlying functions cor      covMcd. E.g., adding method=\"kendall\"      argument list calculates Kendall's rank correlations     instead default calculates Person's correlations. Ordering Hierarchical Clustering function pcaColnames uses hierarchical clustering     approach hclust rearrange column names     time series.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-orderColnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder column names of a time series — orderColnames","text":"orderColnames, integer vector representing   permutaion sort column names, functions, character vector giving rearranged   column names","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-orderColnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder column names of a time series — orderColnames","text":"","code":"## Load Swiss Pension Fund Benchmark Data -    data <- LPP2005REC[,1:6]     ## Abbreviate Column Names -    colnames(data) #> [1] \"SBI\" \"SPI\" \"SII\" \"LMI\" \"MPI\" \"ALT\"  ## Sort Alphabetically -     sortColnames(data) #> [1] \"ALT\" \"LMI\" \"MPI\" \"SBI\" \"SII\" \"SPI\"    ## Sort by Column Names by Hierarchical Clustering -    hclustColnames(data) #> [1] \"SII\" \"SBI\" \"LMI\" \"SPI\" \"MPI\" \"ALT\"    head(data[, hclustColnames(data)]) #> GMT #>                     SII          SBI          LMI          SPI         MPI #> 2005-11-01 -0.003190926 -0.000612745 -0.001108882  0.008414595 0.001548062 #> 2005-11-02 -0.004117638 -0.002762009 -0.001175939  0.002519342 0.000342876 #> 2005-11-03 -0.005209409 -0.001153092 -0.000992456  0.012707292 0.010502959 #> 2005-11-04 -0.001127165 -0.003235750 -0.001198528 -0.000702757 0.011679558 #> 2005-11-07 -0.001795839  0.001310970  0.000360366  0.006205226 0.002709618 #> 2005-11-08  0.002103374  0.000539312  0.002327040  0.000329260 0.000346843 #>                     ALT #> 2005-11-01 -0.002572971 #> 2005-11-02 -0.001141604 #> 2005-11-03  0.005007442 #> 2005-11-04  0.009482677 #> 2005-11-07  0.004723952 #> 2005-11-08  0.000853619"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-orderStatistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Order statistics — orderStatistics","title":"Order statistics — orderStatistics","text":"Computes order statistics \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-orderStatistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order statistics — orderStatistics","text":"","code":"orderStatistics(x)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-orderStatistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order statistics — orderStatistics","text":"x \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-orderStatistics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Order statistics — orderStatistics","text":"orderStatistics computes order statistics column   \"timeSeries\" object. output named list order   statistics column separate component.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-orderStatistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order statistics — orderStatistics","text":"named list, component   univariate \"timeSeries\" containing order statistics   corresponding column input time series.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-orderStatistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order statistics — orderStatistics","text":"","code":"## Load Swiss Pension Fund Benchmark Data -      setRmetricsOptions(myFinCenter = \"GMT\")    X <- LPP2005REC[, \"SPI\"]    colnames(X) #> [1] \"SPI\"     ## Compute 1% Order Statistics -    N <- round(0.01*nrow(X))    N #> [1] 4    OS <- orderStatistics(X)[[1]]    OS[1:N, ] #> GMT #>                    SPI #> 2007-02-27 -0.03574624 #> 2006-05-17 -0.02840692 #> 2007-03-14 -0.02820549 #> 2006-06-08 -0.02737931"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-rollMean.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling statistics — rollMean","title":"Rolling statistics — rollMean","text":"Computes rolling mean, min, max median \"timeSeries\"     object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-rollMean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rolling statistics — rollMean","text":"","code":"rollStats(x, k, FUN=mean, na.pad=FALSE,      align=c(\"center\", \"left\", \"right\"), ...)      rollMean(x, k, na.pad = FALSE,      align = c(\"center\", \"left\", \"right\"), ...) rollMin(x, k, na.pad = FALSE,      align = c(\"center\", \"left\", \"right\"), ...) rollMax(x, k, na.pad = FALSE,      align = c(\"center\", \"left\", \"right\"), ...) rollMedian(x, k, na.pad = FALSE,      align = c(\"center\", \"left\", \"right\"), ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-rollMean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling statistics — rollMean","text":"x uni- multivariate \"timeSeries\" object. k integer width rolling window. Must odd          rollMedian. FUN function rolled. na.pad logical flag. NA padding added beginning?         default FALSE. align character string specifying whether index          result left- right-aligned centered          compared rolling window observations.         default choice set align=\"center\". ... optional arguments passed.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-rollMean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling statistics — rollMean","text":"object class \"timeSeries\".","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-rollMean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling statistics — rollMean","text":"code core functions rollMean, rollMin,     rollMax, rollMedian borrowed package     zoo authored Achim Zeileis, Gabor Grothendieck      Felix Andrews.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-rollMean.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rolling statistics — rollMean","text":"Achim Zeileis, Gabor Grothendieck Felix Andrews      code contributed R package zoo used functions      rollMean, rollMin, rollMax, rollMedian.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-rollMean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling statistics — rollMean","text":"","code":"## Use Swiss Pension Fund Data Set of Returns -     head(LPP2005REC) #> GMT #>                     SBI          SPI          SII          LMI         MPI #> 2005-11-01 -0.000612745  0.008414595 -0.003190926 -0.001108882 0.001548062 #> 2005-11-02 -0.002762009  0.002519342 -0.004117638 -0.001175939 0.000342876 #> 2005-11-03 -0.001153092  0.012707292 -0.005209409 -0.000992456 0.010502959 #> 2005-11-04 -0.003235750 -0.000702757 -0.001127165 -0.001198528 0.011679558 #> 2005-11-07  0.001310970  0.006205226 -0.001795839  0.000360366 0.002709618 #> 2005-11-08  0.000539312  0.000329260  0.002103374  0.002327040 0.000346843 #>                     ALT        LPP25        LPP40        LPP60 #> 2005-11-01 -0.002572971 -0.000130008  0.000199980  0.000809672 #> 2005-11-02 -0.001141604 -0.001561421 -0.001120404 -0.000469730 #> 2005-11-03  0.005007442  0.001541418  0.003317548  0.005731589 #> 2005-11-04  0.009482677  0.000439969  0.002421248  0.004838735 #> 2005-11-07  0.004723952  0.001638182  0.002246611  0.003012363 #> 2005-11-08  0.000853619  0.001087309  0.000962708  0.000828043    SPI <- LPP2005REC[, \"SPI\"]    head(SPI) #> GMT #>                     SPI #> 2005-11-01  0.008414595 #> 2005-11-02  0.002519342 #> 2005-11-03  0.012707292 #> 2005-11-04 -0.000702757 #> 2005-11-07  0.006205226 #> 2005-11-08  0.000329260     ## Plot Drawdowns -     rmean <- rollMean(SPI, k = 10)    plot(rmean)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-rowCumsums.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative row statistics — rowCum","title":"Cumulative row statistics — rowCum","text":"Compute cumulative row statistics.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-rowCumsums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative row statistics — rowCum","text":"","code":"# S4 method for ANY rowCumsums(x, na.rm = FALSE, ...) # S4 method for timeSeries rowCumsums(x, na.rm = FALSE, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-rowCumsums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative row statistics — rowCum","text":"x time series, may object class \"matrix\"     \"timeSeries\".  na.rm logical. missing values removed? ... arguments passed.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-rowCumsums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative row statistics — rowCum","text":"default method, matrix, \"timeSeries\" method, S4 object class \"timeSeries\".","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-rowCumsums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative row statistics — rowCum","text":"","code":"## Simulated Monthly Return Data -     X = matrix(rnorm(24), ncol = 2)       ## Compute cumulated Sums -    rowCumsums(X)   #>              [,1]       [,2] #>  [1,]  0.37811452 -1.9438833 #>  [2,]  1.21417980  1.4494039 #>  [3,]  0.79483540  1.8357962 #>  [4,]  0.44748585  0.6263650 #>  [5,]  0.02806906  1.2087300 #>  [6,]  0.67964150  1.1739693 #>  [7,]  0.96136088  1.2564244 #>  [8,] -0.16347488  0.9412349 #>  [9,] -0.42564936 -2.3020616 #> [10,] -1.41569456 -1.8622381 #> [11,] -0.27908161  0.6510722 #> [12,] -0.73436941 -1.1184703"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-smoothLowess.html","id":null,"dir":"Reference","previous_headings":"","what":"Smoothes time series objects — smooth","title":"Smoothes time series objects — smooth","text":"Smoothes \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-smoothLowess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smoothes time series objects — smooth","text":"","code":"smoothLowess(x, f = 0.5, ...) smoothSpline(x, spar = NULL, ...) smoothSupsmu(x, bass = 5, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-smoothLowess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smoothes time series objects — smooth","text":"x univariate \"timeSeries\" object. f lowess smoother span. gives proportion          points plot influence smooth          value. Larger values give smoothness. spar smoothing parameter, typically (necessarily)          (0,1]. default NULL, .e. value         automatically selected. bass controls smoothness fitted curve. Values          10 indicate increasing smoothness. ... optional arguments passed underlying smoothers.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-smoothLowess.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smoothes time series objects — smooth","text":"functions smoothLowess, smoothSpline, smoothSupsmu     allow smooth timeSerie object. interfaces     function lowess, supmsu. smooth.spline R's     stats package. ... arguments allow pass optional arguments      underlying stats functions tailor smoothing process.      refer manual pages functions proper setting     options.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-smoothLowess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smoothes time series objects — smooth","text":"bivariate \"timeSeries\" object, first column holds   original time series data, second smoothed series.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-smoothLowess.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Smoothes time series objects — smooth","text":"R core team underlying smoother functions.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/statistics-smoothLowess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smoothes time series objects — smooth","text":"","code":"## Use Close from MSFT's Price Series  -     head(MSFT) #> GMT #>               Open    High     Low   Close   Volume #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 53077800 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 26180200 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 37026800 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 29281200 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 42687000 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 68226700    MSFT.CLOSE <- MSFT[, \"Close\"]    head(MSFT.CLOSE) #> GMT #>              Close #> 2000-09-27 60.6250 #> 2000-09-28 61.3125 #> 2000-09-29 60.3125 #> 2000-10-02 59.1250 #> 2000-10-03 56.5625 #> 2000-10-04 55.4375     ## Plot Original and Smoothed Series by Lowess -     MSFT.LOWESS <- smoothLowess(MSFT.CLOSE, f = 0.1)    head(MSFT.LOWESS) #> GMT #>              Close   lowess #> 2000-09-27 60.6250 58.41715 #> 2000-09-28 61.3125 58.16470 #> 2000-09-29 60.3125 57.91224 #> 2000-10-02 59.1250 57.73580 #> 2000-10-03 56.5625 57.55935 #> 2000-10-04 55.4375 57.45904    plot(MSFT.LOWESS)    title(main = \"Close - Lowess Smoothed\")      ## Plot Original and Smoothed Series by Splines -     MSFT.SPLINE <- smoothSpline(MSFT.CLOSE, spar = 0.4)    head(MSFT.SPLINE) #> GMT #>              Close   spline #> 2000-09-27 60.6250 61.41202 #> 2000-09-28 61.3125 60.44324 #> 2000-09-29 60.3125 59.44354 #> 2000-10-02 59.1250 58.40815 #> 2000-10-03 56.5625 57.40205 #> 2000-10-04 55.4375 56.49498    plot(MSFT.SPLINE)    title(main = \"Close - Spline Smoothed\")      ## Plot Original and Smoothed Series by Supsmu -     MSFT.SUPSMU <- smoothSupsmu(MSFT.CLOSE)    head(MSFT.SUPSMU) #> GMT #>              Close   supsmu #> 2000-09-27 60.6250 59.85858 #> 2000-09-28 61.3125 59.38475 #> 2000-09-29 60.3125 58.91093 #> 2000-10-02 59.1250 58.43710 #> 2000-10-03 56.5625 57.96327 #> 2000-10-04 55.4375 57.48944    plot(MSFT.SUPSMU)    title(main = \"Close - Spline Smoothed\")"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate time series — aggregate-methods","title":"Aggregate time series — aggregate-methods","text":"Aggregate \"timeSeries\" object general periods.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate time series — aggregate-methods","text":"","code":"# S4 method for timeSeries aggregate(x, by, FUN, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate time series — aggregate-methods","text":"x object class \"timeSeries\". sequence \"timeDate\" objects denoting aggregation     periods, see section ‘Details’. FUN function applied. ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-aggregate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate time series — aggregate-methods","text":"aggregate aggregates x applying FUN   values time series aggregation periods,   specified argument . Argument class   time(x). sorted duplicated values removed   . pair consecutive values determines   period apply aggregation function FUN, see   findInterval.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate time series — aggregate-methods","text":"object class \"timeSeries\"","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate time series — aggregate-methods","text":"","code":"## Load Microsoft Data Set -    x <- MSFT  ## Aggregate by Weeks -     by <- timeSequence(from = start(x),  to = end(x), by = \"week\")    aggregate(x, by, mean) #> GMT #>                Open     High      Low    Close   Volume #> 2000-09-27 63.43750 63.56250 59.81250 60.62500 53077800 #> 2000-10-04 59.65000 60.07500 57.70000 58.55000 40680380 #> 2000-10-11 54.97500 56.45000 54.16250 55.08750 36448900 #> 2000-10-18 53.03750 54.25000 50.83750 52.13750 50631280 #> 2000-10-25 61.78750 64.18750 60.08750 62.38750 86457340 #> 2000-11-01 66.13750 68.78750 65.85000 67.93750 53496000 #> 2000-11-08 69.83750 70.96876 68.68750 69.60000 53202820 #> 2000-11-15 68.43750 70.08750 67.13124 68.71250 41280860 #> 2000-11-22 68.08750 69.75000 67.13438 68.23750 41464220 #> 2000-11-29 69.15625 69.89062 67.29688 68.17188 43184175 #> 2000-12-06 59.30000 60.45000 56.51250 57.40000 57971300 #> 2000-12-13 56.37500 57.82500 54.85000 56.25000 52329080 #> 2000-12-20 49.64688 50.54688 47.20000 47.76250 56459820 #> 2000-12-27 44.62500 46.90625 43.98438 45.79688 51083775 #> 2001-01-03 44.09375 46.48438 43.21875 44.81250 49496525 #> 2001-01-10 49.25000 51.31250 48.32500 50.23750 49082480 #> 2001-01-17 53.71875 54.78125 52.12500 53.50000 39609175 #> 2001-01-24 59.03750 60.60000 58.03750 60.02500 57656080 #> 2001-01-31 62.96250 64.28750 61.98750 62.95000 40289680 #> 2001-02-07 61.62500 63.38750 60.97500 62.47500 41679580 #> 2001-02-14 60.22500 61.11250 58.43750 59.33750 39770480 #> 2001-02-21 57.15625 58.68750 56.14062 57.06250 32158025 #> 2001-02-28 57.46250 59.10312 56.48438 57.97500 46513080 #> 2001-03-07 58.36250 59.47500 57.38750 58.72188 33749140 #> 2001-03-14 55.52500 56.75626 53.82500 55.21250 45451820 #> 2001-03-21 53.82500 55.21562 52.29688 53.06250 46233500 #> 2001-03-28 55.21250 57.01250 54.33750 56.08750 46281860 #> 2001-04-04 54.92500 56.12500 53.37500 54.23750 45234480 #> 2001-04-11 57.05900 58.71450 56.34050 57.96150 48136060 #> 2001-04-18 61.21750 63.07750 60.62750 62.47000 49402875 #> 2001-04-25 67.99800 69.65800 67.10800 68.50600 61038700 #> 2001-05-02 69.35800 70.23800 67.81800 68.78600 49124540 #> 2001-05-09 70.21400 71.35600 69.48200 70.62400 44692860 #> 2001-05-16 69.33200 69.92400 68.44800 69.11000 31371080 #> 2001-05-23 68.93600 70.25600 68.24800 69.01200 47817480 #> 2001-05-30 70.49000 71.50250 69.58250 70.54000 36405225 #> 2001-06-06 70.65800 71.73200 69.79000 71.05200 34148380 #> 2001-06-13 72.34800 73.00800 71.41800 72.35200 28818960 #> 2001-06-20 68.20600 69.05000 66.95200 68.10600 36473940 #> 2001-06-27 69.18600 70.54200 68.46600 69.76000 30218820 #> 2001-07-04 71.62500 73.37750 70.50250 71.70250 40513375 #> 2001-07-11 66.96600 67.80600 65.54000 66.24800 32357220 #> 2001-07-18 70.96200 71.94400 70.28600 71.30200 36383520 #> 2001-07-25 68.35000 69.43000 67.36400 68.52800 42234800 #> 2001-08-01 66.32600 66.93000 65.54000 66.10400 30027700 #> 2001-08-08 66.71800 67.26200 65.68400 66.33600 21163460 #> 2001-08-15 65.09000 65.70800 63.92000 64.85000 20595220 #> 2001-08-22 62.42200 63.18800 61.01800 62.12800 26973000 #> 2001-08-29 61.11200 62.28400 59.98400 60.89400 25536780 #> 2001-09-05 57.31500 58.79750 56.07000 56.95750 39024075 #> 2001-09-12 55.86333 57.90000 55.30333 56.33333 47782067 #> 2001-09-19 53.96333 54.93333 52.19000 53.70000 56272467 #> 2001-09-26 50.94000 52.09200 49.55000 50.81000 53200500  ## Aggregate to Last Friday of Month -    by <- unique(timeLastNdayInMonth(time(x), 5))    X <- aggregate(x, by, mean)    X #> GMT #>                Open     High      Low    Close   Volume #> 2000-09-29 61.75000 62.25000 59.68750 60.75000 38761600 #> 2000-10-27 57.55625 59.29375 56.00625 57.56562 56372100 #> 2000-11-24 68.72697 70.21875 67.74095 68.96053 44467347 #> 2000-12-29 54.24154 55.53841 52.34635 53.37240 53435483 #> 2001-01-26 53.74306 55.60417 52.71528 54.57986 49482550 #> 2001-02-23 59.98355 61.29934 58.79934 59.90461 39193716 #> 2001-03-30 56.09250 57.47500 54.87625 56.13688 43340872 #> 2001-04-27 61.75026 63.26855 60.66579 62.08382 52669442 #> 2001-05-25 69.56000 70.59350 68.75750 69.70200 40581970 #> 2001-06-29 70.27083 71.39792 69.32333 70.48417 34949438 #> 2001-07-27 68.78474 69.65368 67.71474 68.60632 35630868 #> 2001-08-31 63.64240 64.44040 62.52000 63.33960 25102488 #> 2001-09-28 53.40357 54.79357 52.12071 53.42500 49792257    dayOfWeek(time(X)) #> 2000-09-29 2000-10-27 2000-11-24 2000-12-29 2001-01-26 2001-02-23 2001-03-30  #>      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"  #> 2001-04-27 2001-05-25 2001-06-29 2001-07-27 2001-08-31 2001-09-28  #>      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"      \"Fri\"     isMonthly(X) #> [1] TRUE  ## Aggregate to Last Day of Quarter -    by <- unique(timeLastDayInQuarter(time(x)))    X <-  aggregate(x, by, mean)    X #> GMT #>                Open     High      Low    Close   Volume #> 2000-09-30 61.75000 62.25000 59.68750 60.75000 38761600 #> 2000-12-31 59.66245 61.15799 58.15104 59.40476 51663067 #> 2001-03-31 56.60282 58.10383 55.45111 56.83947 43853037 #> 2001-06-30 67.47548 68.69083 66.53270 67.70242 42081671 #> 2001-09-30 62.85552 63.81966 61.71155 62.67172 34511040    isQuarterly(X) #> [1] TRUE"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear filtering on a time series — filter","title":"Linear filtering on a time series — filter","text":"Applies linear filtering univariate \"timeSeries\".","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear filtering on a time series — filter","text":"","code":"# S4 method for timeSeries filter(x, filter, method = c(\"convolution\", \"recursive\"), sides = 2,         circular = FALSE, init = NULL)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear filtering on a time series — filter","text":"x object class \"timeSeries\". filter coefficients filter. method \"convolution\" \"recursive\". sides,circular convolution filters .  Onesided sides = 1, centred     around lag 0 sides = 2. Circular circular =     TRUE.  init recursive filters . Values start time     series.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear filtering on a time series — filter","text":"filter generic function default method stats::filter.   method \"timeSeries\" wrapper latter. See ?stats::filter details arguments.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear filtering on a time series — filter","text":"\"timeSeries\" object","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear filtering on a time series — filter","text":"","code":"## Creata a dummy signal 'timeSeries' -     data <- matrix(rnorm(100), ncol = 2)    s <- timeSeries(data, units=c(\"A\", \"B\"))    head(s) #>  #>               A           B #> [1,]  0.9851607 -1.55567959 #> [2,]  0.5336291 -1.55848871 #> [3,] -1.3122055  0.34779055 #> [4,]  1.0059125  0.07760222 #> [5,] -0.4908190 -0.56542618 #> [6,]  0.1710881 -0.46686573     ## Filter the series -     f <- filter(s, rep(1, 3))    head(f) #>  #>                A          B #> [1,]          NA         NA #> [2,]  0.20658444 -2.7663777 #> [3,]  0.22733616 -1.1330959 #> [4,] -0.79711200 -0.1400334 #> [5,]  0.68618160 -0.9546897 #> [6,]  0.01657283 -0.5366053     ## Plot and compare the first series -     plot(cbind(s[, 1], f[, 1]), plot.type=\"s\")"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-lag.html","id":null,"dir":"Reference","previous_headings":"","what":"Lag a 'timeSeries' object — lag","title":"Lag a 'timeSeries' object — lag","text":"Compute lagged version \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-lag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lag a 'timeSeries' object — lag","text":"","code":"# S4 method for timeSeries lag(x, k = 1, trim = FALSE, units = NULL, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-lag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lag a 'timeSeries' object — lag","text":"x object class timeSeries. k integer number, number lags (units observations).     default 1. Can also vector, case result     multivariate \"timeSeries\" column contains     series lagged k[], see examples.  trim logical value. default TRUE, first missing     observation return series removed. units optional character string, allows overwrite current     column names \"timeSeries\" object. default NULL     means column names selected automatically.  ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-lag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lag a 'timeSeries' object — lag","text":"lagged object class \"timeSeries\".","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-lag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lag a 'timeSeries' object — lag","text":"","code":"## Load Micsrosoft Data Set -    x = MSFT[1:20, \"Open\"]     ## Lag the 'timeSeries' Object:    lag(x, k = -1:1) #> GMT #>            Open[-1] Open[0] Open[1] #> 2000-09-27  60.8125 63.4375      NA #> 2000-09-28  61.0000 60.8125 63.4375 #> 2000-09-29  60.5000 61.0000 60.8125 #> 2000-10-02  59.5625 60.5000 61.0000 #> 2000-10-03  56.3750 59.5625 60.5000 #> 2000-10-04  55.5000 56.3750 59.5625 #> 2000-10-05  55.8125 55.5000 56.3750 #> 2000-10-06  55.6250 55.8125 55.5000 #> 2000-10-09  53.9375 55.6250 55.8125 #> 2000-10-10  54.0000 53.9375 55.6250 #> 2000-10-11  56.3125 54.0000 53.9375 #> 2000-10-12  53.8750 56.3125 54.0000 #> 2000-10-13  53.5000 53.8750 56.3125 #> 2000-10-16  51.8750 53.5000 53.8750 #> 2000-10-17  49.6250 51.8750 53.5000 #> 2000-10-18  58.4375 49.6250 51.8750 #> 2000-10-19  61.3125 58.4375 49.6250 #> 2000-10-20  64.6250 61.3125 58.4375 #> 2000-10-23  62.6250 64.6250 61.3125 #> 2000-10-24       NA 62.6250 64.6250"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-model.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Model frames for time series objects — model.frame","title":"Model frames for time series objects — model.frame","text":"Allow work model frames \"timeSeries\" objects.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-model.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model frames for time series objects — model.frame","text":"Returns object class 'timeSeries.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-model.frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model frames for time series objects — model.frame","text":"function model.frame generic function returns      R-ststs framework default data.frame variables      needed use formula ... arguments. contrast      method returns object class timeSeries      argument data data.frame also object      class \"timeSeries\".","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-model.frame.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Model frames for time series objects — model.frame","text":"function preliminary untested.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-model.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model frames for time series objects — model.frame","text":"","code":"## Load Microsoft Data -    setRmetricsOptions(myFinCenter = \"GMT\")    X <- MSFT[1:12, ]  ## Extract High's and Low's:    DATA <- model.frame( ~ High + Low, data = X)    class(DATA) #> [1] \"data.frame\"    as.timeSeries(DATA) #> GMT #>               High     Low #> 2000-09-27 63.5625 59.8125 #> 2000-09-28 61.8750 60.6250 #> 2000-09-29 61.3125 58.6250 #> 2000-10-02 60.8125 58.2500 #> 2000-10-03 59.8125 56.5000 #> 2000-10-04 56.5625 54.5000 #> 2000-10-05 57.2500 55.2500 #> 2000-10-06 56.7500 54.7500 #> 2000-10-09 55.7500 53.0000 #> 2000-10-10 55.5625 53.8125 #> 2000-10-11 56.9375 54.0000 #> 2000-10-12 56.8750 53.8125     ## Extract Open Prices and their log10's:    base <- 10    Open <- model.frame(Open ~ log(Open, base = `base`), data = X)    colnames(Open) <- c(\"X\", \"log10(X)\")    class(Open) #> [1] \"data.frame\"    as.timeSeries(Open) #> GMT #>                  X log10(X) #> 2000-09-27 63.4375 1.802346 #> 2000-09-28 60.8125 1.783993 #> 2000-09-29 61.0000 1.785330 #> 2000-10-02 60.5000 1.781755 #> 2000-10-03 59.5625 1.774973 #> 2000-10-04 56.3750 1.751087 #> 2000-10-05 55.5000 1.744293 #> 2000-10-06 55.8125 1.746731 #> 2000-10-09 55.6250 1.745270 #> 2000-10-10 53.9375 1.731891 #> 2000-10-11 54.0000 1.732394 #> 2000-10-12 56.3125 1.750605"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-na.contiguous.html","id":null,"dir":"Reference","previous_headings":"","what":"Find longest contiguous stretch of non-NAs — na.contiguous","title":"Find longest contiguous stretch of non-NAs — na.contiguous","text":"Find longest consecutive stretch non-missing values      \"timeSeries\" object. event tie, first      stretch.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-na.contiguous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find longest contiguous stretch of non-NAs — na.contiguous","text":"","code":"# S4 method for timeSeries na.contiguous(object, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-na.contiguous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find longest contiguous stretch of non-NAs — na.contiguous","text":"object \"timeSeries\" object. ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-na.contiguous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find longest contiguous stretch of non-NAs — na.contiguous","text":"\"timeSeries\" object without missing values","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-na.contiguous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find longest contiguous stretch of non-NAs — na.contiguous","text":"","code":"## Dummy 'timeSeries' with NAs entries    data <- matrix(sample(c(1:20, rep(NA,4))), ncol = 2)    s <- timeSeries(data, timeCalendar())     ## Find the longest consecutive non-missing values    na.contiguous(s) #> GMT #>            TS.1 TS.2 #> 2023-10-01    1   11 #> 2023-11-01   19    7 #> 2023-12-01    2   16"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-na.omit.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle missing values in 'timeSeries' objects — na","title":"Handle missing values in 'timeSeries' objects — na","text":"Functions handling missing values \"timeSeries\" objects.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-na.omit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle missing values in 'timeSeries' objects — na","text":"","code":"# S4 method for timeSeries na.omit(object, method = c(\"r\", \"s\", \"z\", \"ir\", \"iz\", \"ie\"),      interp = c(\"before\", \"linear\", \"after\"), fun, ...)  ## Deprecated: removeNA(x, ...) substituteNA(x, type = c(\"zeros\", \"mean\", \"median\"), ...) interpNA(x, method = c(\"linear\", \"before\", \"after\"), ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-na.omit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle missing values in 'timeSeries' objects — na","text":"object object class \"timeSeries\". method na.omit, method handling NAs;      interpNA, interpolate matrix column     column, see Section ‘Details’.  interp, type Three alternative methods provided remove NAs     data:      type=\"zeros\" replaces missing values zeros,     type=\"mean\" replaces missing values column mean,     type=\"median\" replaces missing values column     median. fun function name function, \"mean\"     median. fun applied non-NA values     column determine replacement value. call looks like     fun(coli, na.rm = TRUE), fun argument     na.rm. arguments except object ignored     fun specified.  x numeric matrix, object can transformed     matrix x = .matrix(x, ...). x     vector, transformed one-dimensional matrix.  ... arguments passed function .matrix.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-na.omit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handle missing values in 'timeSeries' objects — na","text":"Functions handling missing values \"timeSeries\" objects      objects can transformed vector two      dimensional matrix. na.omit argument method specifies method     handle NAs.  Can one following strings:  method=\"s\" na.rm = FALSE, skip, .e. nothing, method=\"r\" remove NAs, method=\"z\" substitute NAs zeros, method=\"ir\" interpolate NAs remove NAs           beginning end series, method=\"iz\" interpolate NAs substitute NAs         beginning end series, method=\"ie\" interpolate NAs extrapolate NAs         beginning end theseries. interpNA argument method specifies     interpolate matrix column     column. One following character strings:     \"linear\",     \"\",      \"\".     interpolation function approx used. functions listed topic.  Missing Values Price Index Series: Applied timeSeries objects function removeNA     just removes rows NAs series. interpolation     time series points one can use function interpNA.     Three different methods interpolation offered: \"linear\"     linear interpolation, \"\" uses previous value,     \"\" uses following value. Note,      interpolation done index scale time scale. Missing Values Return Series: return series function substituteNA may useful.      function allows fill missing values either method=\"zeros\",      method=\"mean\" method=\"median\" value      appropriate columns.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-na.omit.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Handle missing values in 'timeSeries' objects — na","text":"dealing daily data sets, exists another function     alignDailySeries can handle missing data un-aligned     calendrical \"timeSeries\" objects. functions removeNA, substituteNA interpNA      older implementations. Please use cases possible      new function na.omit. Additional remarks GNB: removeNA(x) equivalent na.omit(x)     na.omit(x), methods = \"r\". interpNA can replaced call na.omit     argument method equal ir, iz, ie,     argument \"interp\" equal \"method\" argument     interpNA (note defaults ). substituteNA(x, type = \"zeros\") equivalent     na.omit(x, method = \"z\"). values type one     can use argument fun, na.omit(x, fun = \"mean\"). final remark: three deprecated functions non-generic.     removeNA(x) completely redundant simply calls     na.omit. two however may useful matrix-like     objects. Please inform maintainer package use     objects class \"timeSeries\" wish     kept future.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-na.omit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Handle missing values in 'timeSeries' objects — na","text":"Troyanskaya O., Cantor M., Sherlock G., Brown P., Hastie T.,      Tibshirani R., Botstein D., Altman R.B., (2001);      Missing Value Estimation Methods DNA microarrays     Bioinformatics 17, 520--525.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-na.omit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle missing values in 'timeSeries' objects — na","text":"","code":"X <- matrix(rnorm(100), ncol = 5)  # Create a Matrix X X[3, 5] <- NA                      # Replace a Single NA Inside X[17, 2:4] <- c(NA, NA, NA)        # Replace Three in a Row Inside X[13:15, 4] <- c(NA, NA, NA)       # Replace Three in a Column Inside X[11:12, 5] <- c(NA, NA)           # Replace Two at the Right Border X[20, 1] <- NA                     # Replace One in the Lower Left Corner X #>              [,1]        [,2]        [,3]        [,4]        [,5] #>  [1,] -1.38300534  0.36818151 -1.33581811 -1.33646260  0.02155207 #>  [2,] -1.68636263  0.09713429 -0.74909519 -0.04449205 -2.25605388 #>  [3,]  0.99638000  1.48457001 -0.56573440 -0.03258890          NA #>  [4,] -0.75525465  0.50311697 -0.46460707  0.11172541 -1.04620925 #>  [5,] -0.77794250 -1.06047790  0.23218979 -1.13748485 -1.28139560 #>  [6,]  0.81303352  0.03731678  1.38473259 -0.30385542 -0.70408428 #>  [7,] -0.01840940  0.61124425 -0.69913167  0.90586198  0.61226109 #>  [8,] -0.65331681 -0.52581773  0.58413787  1.39339790 -0.36115428 #>  [9,] -1.07135036  0.78828818 -0.44125019  0.70650028 -0.41463268 #> [10,]  1.44999131  0.32026384 -1.76315270  0.53062526 -0.88296941 #> [11,] -2.15717620  0.10068453 -0.33208134  0.84349377          NA #> [12,] -0.28623754 -0.71920406 -1.63481270  0.31811098          NA #> [13,] -0.38423421 -1.20545808 -0.26450379          NA -1.20909152 #> [14,] -0.05014592 -0.29127782  0.29929850          NA -1.54151592 #> [15,]  0.35223126  2.25376438  0.98397636          NA -0.82490739 #> [16,] -1.52088248  0.21382131  0.05082656 -0.48616665 -1.23617668 #> [17,] -0.28058352          NA          NA          NA -2.09464347 #> [18,] -0.02736514  1.19415643  0.54545735  0.09066719 -1.23721039 #> [19,] -2.10717985  1.86686082 -0.63718336  1.54251263  0.27219047 #> [20,]          NA -0.01110177 -0.37886743  0.34644952 -0.97134283 Xts <- timeSeries(X)  # convert X to timeSeries Xts  ## Remove Rows with NAs na.omit(Xts) #>  #>              SS.1        SS.2        SS.3        SS.4        SS.5 #>  [1,] -1.38300534  0.36818151 -1.33581811 -1.33646260  0.02155207 #>  [2,] -1.68636263  0.09713429 -0.74909519 -0.04449205 -2.25605388 #>  [3,] -0.75525465  0.50311697 -0.46460707  0.11172541 -1.04620925 #>  [4,] -0.77794250 -1.06047790  0.23218979 -1.13748485 -1.28139560 #>  [5,]  0.81303352  0.03731678  1.38473259 -0.30385542 -0.70408428 #>  [6,] -0.01840940  0.61124425 -0.69913167  0.90586198  0.61226109 #>  [7,] -0.65331681 -0.52581773  0.58413787  1.39339790 -0.36115428 #>  [8,] -1.07135036  0.78828818 -0.44125019  0.70650028 -0.41463268 #>  [9,]  1.44999131  0.32026384 -1.76315270  0.53062526 -0.88296941 #> [10,] -1.52088248  0.21382131  0.05082656 -0.48616665 -1.23617668 #> [11,] -0.02736514  1.19415643  0.54545735  0.09066719 -1.23721039 #> [12,] -2.10717985  1.86686082 -0.63718336  1.54251263  0.27219047  ## Subsitute NA's with zeros or column means (formerly substituteNA()) na.omit(Xts, method = \"z\") #>  #>              SS.1        SS.2        SS.3        SS.4        SS.5 #>  [1,] -1.38300534  0.36818151 -1.33581811 -1.33646260  0.02155207 #>  [2,] -1.68636263  0.09713429 -0.74909519 -0.04449205 -2.25605388 #>  [3,]  0.99638000  1.48457001 -0.56573440 -0.03258890  0.00000000 #>  [4,] -0.75525465  0.50311697 -0.46460707  0.11172541 -1.04620925 #>  [5,] -0.77794250 -1.06047790  0.23218979 -1.13748485 -1.28139560 #>  [6,]  0.81303352  0.03731678  1.38473259 -0.30385542 -0.70408428 #>  [7,] -0.01840940  0.61124425 -0.69913167  0.90586198  0.61226109 #>  [8,] -0.65331681 -0.52581773  0.58413787  1.39339790 -0.36115428 #>  [9,] -1.07135036  0.78828818 -0.44125019  0.70650028 -0.41463268 #> [10,]  1.44999131  0.32026384 -1.76315270  0.53062526 -0.88296941 #> [11,] -2.15717620  0.10068453 -0.33208134  0.84349377  0.00000000 #> [12,] -0.28623754 -0.71920406 -1.63481270  0.31811098  0.00000000 #> [13,] -0.38423421 -1.20545808 -0.26450379  0.00000000 -1.20909152 #> [14,] -0.05014592 -0.29127782  0.29929850  0.00000000 -1.54151592 #> [15,]  0.35223126  2.25376438  0.98397636  0.00000000 -0.82490739 #> [16,] -1.52088248  0.21382131  0.05082656 -0.48616665 -1.23617668 #> [17,] -0.28058352  0.00000000  0.00000000  0.00000000 -2.09464347 #> [18,] -0.02736514  1.19415643  0.54545735  0.09066719 -1.23721039 #> [19,] -2.10717985  1.86686082 -0.63718336  1.54251263  0.27219047 #> [20,]  0.00000000 -0.01110177 -0.37886743  0.34644952 -0.97134283 na.omit(Xts, fun = \"mean\") #>  #>              SS.1        SS.2        SS.3        SS.4        SS.5 #>  [1,] -1.38300534  0.36818151 -1.33581811 -1.33646260  0.02155207 #>  [2,] -1.68636263  0.09713429 -0.74909519 -0.04449205 -2.25605388 #>  [3,]  0.99638000  1.48457001 -0.56573440 -0.03258890 -0.89149317 #>  [4,] -0.75525465  0.50311697 -0.46460707  0.11172541 -1.04620925 #>  [5,] -0.77794250 -1.06047790  0.23218979 -1.13748485 -1.28139560 #>  [6,]  0.81303352  0.03731678  1.38473259 -0.30385542 -0.70408428 #>  [7,] -0.01840940  0.61124425 -0.69913167  0.90586198  0.61226109 #>  [8,] -0.65331681 -0.52581773  0.58413787  1.39339790 -0.36115428 #>  [9,] -1.07135036  0.78828818 -0.44125019  0.70650028 -0.41463268 #> [10,]  1.44999131  0.32026384 -1.76315270  0.53062526 -0.88296941 #> [11,] -2.15717620  0.10068453 -0.33208134  0.84349377 -0.89149317 #> [12,] -0.28623754 -0.71920406 -1.63481270  0.31811098 -0.89149317 #> [13,] -0.38423421 -1.20545808 -0.26450379  0.21551840 -1.20909152 #> [14,] -0.05014592 -0.29127782  0.29929850  0.21551840 -1.54151592 #> [15,]  0.35223126  2.25376438  0.98397636  0.21551840 -0.82490739 #> [16,] -1.52088248  0.21382131  0.05082656 -0.48616665 -1.23617668 #> [17,] -0.28058352  0.31716136 -0.27292731  0.21551840 -2.09464347 #> [18,] -0.02736514  1.19415643  0.54545735  0.09066719 -1.23721039 #> [19,] -2.10717985  1.86686082 -0.63718336  1.54251263  0.27219047 #> [20,] -0.50251634 -0.01110177 -0.37886743  0.34644952 -0.97134283 na.omit(Xts, fun = \"median\") #>  #>              SS.1        SS.2        SS.3        SS.4        SS.5 #>  [1,] -1.38300534  0.36818151 -1.33581811 -1.33646260  0.02155207 #>  [2,] -1.68636263  0.09713429 -0.74909519 -0.04449205 -2.25605388 #>  [3,]  0.99638000  1.48457001 -0.56573440 -0.03258890 -0.97134283 #>  [4,] -0.75525465  0.50311697 -0.46460707  0.11172541 -1.04620925 #>  [5,] -0.77794250 -1.06047790  0.23218979 -1.13748485 -1.28139560 #>  [6,]  0.81303352  0.03731678  1.38473259 -0.30385542 -0.70408428 #>  [7,] -0.01840940  0.61124425 -0.69913167  0.90586198  0.61226109 #>  [8,] -0.65331681 -0.52581773  0.58413787  1.39339790 -0.36115428 #>  [9,] -1.07135036  0.78828818 -0.44125019  0.70650028 -0.41463268 #> [10,]  1.44999131  0.32026384 -1.76315270  0.53062526 -0.88296941 #> [11,] -2.15717620  0.10068453 -0.33208134  0.84349377 -0.97134283 #> [12,] -0.28623754 -0.71920406 -1.63481270  0.31811098 -0.97134283 #> [13,] -0.38423421 -1.20545808 -0.26450379  0.21491819 -1.20909152 #> [14,] -0.05014592 -0.29127782  0.29929850  0.21491819 -1.54151592 #> [15,]  0.35223126  2.25376438  0.98397636  0.21491819 -0.82490739 #> [16,] -1.52088248  0.21382131  0.05082656 -0.48616665 -1.23617668 #> [17,] -0.28058352  0.21382131 -0.37886743  0.21491819 -2.09464347 #> [18,] -0.02736514  1.19415643  0.54545735  0.09066719 -1.23721039 #> [19,] -2.10717985  1.86686082 -0.63718336  1.54251263  0.27219047 #> [20,] -0.38423421 -0.01110177 -0.37886743  0.34644952 -0.97134283  ## Subsitute NA's with a trimmed mean na.omit(Xts, fun = function(x, na.rm) mean(x, trim = 0.10, na.rm = na.rm)) #>  #>              SS.1        SS.2        SS.3        SS.4        SS.5 #>  [1,] -1.38300534  0.36818151 -1.33581811 -1.33646260  0.02155207 #>  [2,] -1.68636263  0.09713429 -0.74909519 -0.04449205 -2.25605388 #>  [3,]  0.99638000  1.48457001 -0.56573440 -0.03258890 -0.90077274 #>  [4,] -0.75525465  0.50311697 -0.46460707  0.11172541 -1.04620925 #>  [5,] -0.77794250 -1.06047790  0.23218979 -1.13748485 -1.28139560 #>  [6,]  0.81303352  0.03731678  1.38473259 -0.30385542 -0.70408428 #>  [7,] -0.01840940  0.61124425 -0.69913167  0.90586198  0.61226109 #>  [8,] -0.65331681 -0.52581773  0.58413787  1.39339790 -0.36115428 #>  [9,] -1.07135036  0.78828818 -0.44125019  0.70650028 -0.41463268 #> [10,]  1.44999131  0.32026384 -1.76315270  0.53062526 -0.88296941 #> [11,] -2.15717620  0.10068453 -0.33208134  0.84349377 -0.90077274 #> [12,] -0.28623754 -0.71920406 -1.63481270  0.31811098 -0.90077274 #> [13,] -0.38423421 -1.20545808 -0.26450379  0.23158889 -1.20909152 #> [14,] -0.05014592 -0.29127782  0.29929850  0.23158889 -1.54151592 #> [15,]  0.35223126  2.25376438  0.98397636  0.23158889 -0.82490739 #> [16,] -1.52088248  0.21382131  0.05082656 -0.48616665 -1.23617668 #> [17,] -0.28058352  0.29280939 -0.28277640  0.23158889 -2.09464347 #> [18,] -0.02736514  1.19415643  0.54545735  0.09066719 -1.23721039 #> [19,] -2.10717985  1.86686082 -0.63718336  1.54251263  0.27219047 #> [20,] -0.52003680 -0.01110177 -0.37886743  0.34644952 -0.97134283  ## Interpolate NA's Linearily (formerly interpNA()) na.omit(X, method = \"ir\", interp = \"linear\") #>              [,1]        [,2]        [,3]        [,4]        [,5] #>  [1,] -1.38300534  0.36818151 -1.33581811 -1.33646260  0.02155207 #>  [2,] -1.68636263  0.09713429 -0.74909519 -0.04449205 -2.25605388 #>  [3,] -0.75525465  0.50311697 -0.46460707  0.11172541 -1.04620925 #>  [4,] -0.77794250 -1.06047790  0.23218979 -1.13748485 -1.28139560 #>  [5,]  0.81303352  0.03731678  1.38473259 -0.30385542 -0.70408428 #>  [6,] -0.01840940  0.61124425 -0.69913167  0.90586198  0.61226109 #>  [7,] -0.65331681 -0.52581773  0.58413787  1.39339790 -0.36115428 #>  [8,] -1.07135036  0.78828818 -0.44125019  0.70650028 -0.41463268 #>  [9,]  1.44999131  0.32026384 -1.76315270  0.53062526 -0.88296941 #> [10,] -1.52088248  0.21382131  0.05082656 -0.48616665 -1.23617668 #> [11,] -0.02736514  1.19415643  0.54545735  0.09066719 -1.23721039 #> [12,] -2.10717985  1.86686082 -0.63718336  1.54251263  0.27219047 #> attr(,\"na.action\") #> [1] 20 17 13 14 15  3 11 12 #> attr(,\"class\") #> [1] \"omit\" na.omit(X, method = \"iz\", interp = \"linear\") #>              [,1]        [,2]        [,3]        [,4]        [,5] #>  [1,] -1.38300534  0.36818151 -1.33581811 -1.33646260  0.02155207 #>  [2,] -1.68636263  0.09713429 -0.74909519 -0.04449205 -2.25605388 #>  [3,] -0.75525465  0.50311697 -0.46460707  0.11172541 -1.04620925 #>  [4,] -0.77794250 -1.06047790  0.23218979 -1.13748485 -1.28139560 #>  [5,]  0.81303352  0.03731678  1.38473259 -0.30385542 -0.70408428 #>  [6,] -0.01840940  0.61124425 -0.69913167  0.90586198  0.61226109 #>  [7,] -0.65331681 -0.52581773  0.58413787  1.39339790 -0.36115428 #>  [8,] -1.07135036  0.78828818 -0.44125019  0.70650028 -0.41463268 #>  [9,]  1.44999131  0.32026384 -1.76315270  0.53062526 -0.88296941 #> [10,] -1.52088248  0.21382131  0.05082656 -0.48616665 -1.23617668 #> [11,] -0.02736514  1.19415643  0.54545735  0.09066719 -1.23721039 #> [12,] -2.10717985  1.86686082 -0.63718336  1.54251263  0.27219047 #> attr(,\"na.action\") #> [1] 20 17 13 14 15  3 11 12 #> attr(,\"class\") #> [1] \"omit\" na.omit(X, method = \"ie\", interp = \"linear\") #>              [,1]        [,2]        [,3]        [,4]        [,5] #>  [1,] -1.38300534  0.36818151 -1.33581811 -1.33646260  0.02155207 #>  [2,] -1.68636263  0.09713429 -0.74909519 -0.04449205 -2.25605388 #>  [3,] -0.75525465  0.50311697 -0.46460707  0.11172541 -1.04620925 #>  [4,] -0.77794250 -1.06047790  0.23218979 -1.13748485 -1.28139560 #>  [5,]  0.81303352  0.03731678  1.38473259 -0.30385542 -0.70408428 #>  [6,] -0.01840940  0.61124425 -0.69913167  0.90586198  0.61226109 #>  [7,] -0.65331681 -0.52581773  0.58413787  1.39339790 -0.36115428 #>  [8,] -1.07135036  0.78828818 -0.44125019  0.70650028 -0.41463268 #>  [9,]  1.44999131  0.32026384 -1.76315270  0.53062526 -0.88296941 #> [10,] -1.52088248  0.21382131  0.05082656 -0.48616665 -1.23617668 #> [11,] -0.02736514  1.19415643  0.54545735  0.09066719 -1.23721039 #> [12,] -2.10717985  1.86686082 -0.63718336  1.54251263  0.27219047 #> attr(,\"na.action\") #> [1] 20 17 13 14 15  3 11 12 #> attr(,\"class\") #> [1] \"omit\"     ## Take Previous Values in a Column na.omit(X, method = \"ir\", interp = \"before\") #>              [,1]        [,2]        [,3]        [,4]        [,5] #>  [1,] -1.38300534  0.36818151 -1.33581811 -1.33646260  0.02155207 #>  [2,] -1.68636263  0.09713429 -0.74909519 -0.04449205 -2.25605388 #>  [3,] -0.75525465  0.50311697 -0.46460707  0.11172541 -1.04620925 #>  [4,] -0.77794250 -1.06047790  0.23218979 -1.13748485 -1.28139560 #>  [5,]  0.81303352  0.03731678  1.38473259 -0.30385542 -0.70408428 #>  [6,] -0.01840940  0.61124425 -0.69913167  0.90586198  0.61226109 #>  [7,] -0.65331681 -0.52581773  0.58413787  1.39339790 -0.36115428 #>  [8,] -1.07135036  0.78828818 -0.44125019  0.70650028 -0.41463268 #>  [9,]  1.44999131  0.32026384 -1.76315270  0.53062526 -0.88296941 #> [10,] -1.52088248  0.21382131  0.05082656 -0.48616665 -1.23617668 #> [11,] -0.02736514  1.19415643  0.54545735  0.09066719 -1.23721039 #> [12,] -2.10717985  1.86686082 -0.63718336  1.54251263  0.27219047 #> attr(,\"na.action\") #> [1] 20 17 13 14 15  3 11 12 #> attr(,\"class\") #> [1] \"omit\" na.omit(X, method = \"iz\", interp = \"before\") #>              [,1]        [,2]        [,3]        [,4]        [,5] #>  [1,] -1.38300534  0.36818151 -1.33581811 -1.33646260  0.02155207 #>  [2,] -1.68636263  0.09713429 -0.74909519 -0.04449205 -2.25605388 #>  [3,] -0.75525465  0.50311697 -0.46460707  0.11172541 -1.04620925 #>  [4,] -0.77794250 -1.06047790  0.23218979 -1.13748485 -1.28139560 #>  [5,]  0.81303352  0.03731678  1.38473259 -0.30385542 -0.70408428 #>  [6,] -0.01840940  0.61124425 -0.69913167  0.90586198  0.61226109 #>  [7,] -0.65331681 -0.52581773  0.58413787  1.39339790 -0.36115428 #>  [8,] -1.07135036  0.78828818 -0.44125019  0.70650028 -0.41463268 #>  [9,]  1.44999131  0.32026384 -1.76315270  0.53062526 -0.88296941 #> [10,] -1.52088248  0.21382131  0.05082656 -0.48616665 -1.23617668 #> [11,] -0.02736514  1.19415643  0.54545735  0.09066719 -1.23721039 #> [12,] -2.10717985  1.86686082 -0.63718336  1.54251263  0.27219047 #> attr(,\"na.action\") #> [1] 20 17 13 14 15  3 11 12 #> attr(,\"class\") #> [1] \"omit\" na.omit(X, method = \"ie\", interp = \"before\") #>              [,1]        [,2]        [,3]        [,4]        [,5] #>  [1,] -1.38300534  0.36818151 -1.33581811 -1.33646260  0.02155207 #>  [2,] -1.68636263  0.09713429 -0.74909519 -0.04449205 -2.25605388 #>  [3,] -0.75525465  0.50311697 -0.46460707  0.11172541 -1.04620925 #>  [4,] -0.77794250 -1.06047790  0.23218979 -1.13748485 -1.28139560 #>  [5,]  0.81303352  0.03731678  1.38473259 -0.30385542 -0.70408428 #>  [6,] -0.01840940  0.61124425 -0.69913167  0.90586198  0.61226109 #>  [7,] -0.65331681 -0.52581773  0.58413787  1.39339790 -0.36115428 #>  [8,] -1.07135036  0.78828818 -0.44125019  0.70650028 -0.41463268 #>  [9,]  1.44999131  0.32026384 -1.76315270  0.53062526 -0.88296941 #> [10,] -1.52088248  0.21382131  0.05082656 -0.48616665 -1.23617668 #> [11,] -0.02736514  1.19415643  0.54545735  0.09066719 -1.23721039 #> [12,] -2.10717985  1.86686082 -0.63718336  1.54251263  0.27219047 #> attr(,\"na.action\") #> [1] 20 17 13 14 15  3 11 12 #> attr(,\"class\") #> [1] \"omit\"   ## examples with X (which is a matrix, not \"timeSeries\" ## (these examples are not run automatically as these functions are ## deprecated.)  if(FALSE){ ## Remove Rows with NAs -     removeNA(X)     ## Subsitute NA's by Zeros or Column Means -     substituteNA(X, type = \"zeros\")    substituteNA(X, type = \"mean\")     ## Interpolate NA's Linearily -     interpNA(X, method = \"linear\")    # Note the corner missing value cannot be interpolated!     ## Take Previous Values in a Column -     interpNA(X, method = \"before\")    # Also here, the corner value is excluded }"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-window.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for 'window' in package 'timeSeries' — window","title":"Methods for 'window' in package 'timeSeries' — window","text":"Extract part \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for 'window' in package 'timeSeries' — window","text":"","code":"# S4 method for timeSeries window(x, start, end, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for 'window' in package 'timeSeries' — window","text":"x object class \"timeSeries\". start, end starting date end date, end must start. ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-window.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods for 'window' in package 'timeSeries' — window","text":"window extracts subset \"timeSeries\" object   x observed times start end.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/stats-window.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for 'window' in package 'timeSeries' — window","text":"","code":"## Load LPP Benchmark Returns -    x <- LPP2005REC[, 7:9]    range(time(x)) #> GMT #> [1] [2005-11-01] [2007-04-11]    ## Extract Data for January 2006 -     window(x, \"2006-01-01\", \"2006-01-31\") #> GMT #>                   LPP25        LPP40        LPP60 #> 2006-01-02  0.000165480  0.000297932  0.000444413 #> 2006-01-03  0.000019500 -0.000076900  0.000009450 #> 2006-01-04  0.001847585  0.002227044  0.002945121 #> 2006-01-05 -0.000602521 -0.000805771 -0.001093968 #> 2006-01-06  0.000553944  0.000844125  0.001291886 #> 2006-01-09  0.001844267  0.003025315  0.004325551 #> 2006-01-10 -0.001280919 -0.001540235 -0.001981789 #> 2006-01-11  0.000960843  0.002094522  0.003631846 #> 2006-01-12  0.002548068  0.003119294  0.003796029 #> 2006-01-13 -0.001161811 -0.001200778 -0.001223253 #> 2006-01-16  0.000193729  0.000162094  0.000196195 #> 2006-01-17 -0.001337495 -0.002720934 -0.004437794 #> 2006-01-18 -0.002019320 -0.004157731 -0.006873332 #> 2006-01-19  0.001650710  0.003430897  0.005727921 #> 2006-01-20 -0.002759185 -0.003613313 -0.004887407 #> 2006-01-23 -0.002815600 -0.005072953 -0.007675798 #> 2006-01-24  0.000253631  0.001224870  0.002318423 #> 2006-01-25 -0.000604919  0.000462553  0.001621599 #> 2006-01-26  0.001842887  0.003443139  0.005584311 #> 2006-01-27  0.003394103  0.005791901  0.008762193 #> 2006-01-30  0.001319517  0.002116907  0.003086897 #> 2006-01-31  0.000222982  0.000133349  0.000055900"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class 'timeSeries' in package timeSeries — timeSeries-class","title":"Class 'timeSeries' in package timeSeries — timeSeries-class","text":"Class \"timeSeries\" package timeSeries.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class 'timeSeries' in package timeSeries — timeSeries-class","text":"main functions creating objects class \"timeSeries\"   timeSeries .timeSeries. Objects can also created calls form   new(\"timeSeries\", .Data, units, positions, format, FinCenter,   recordIDs, title, documentation) recommended   routine work.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class 'timeSeries' in package timeSeries — timeSeries-class","text":"structure \"timeSeries\" objects , general,   considered internal. accessor functions get set   components used get set values slots.  .Data: Object class \"matrix\" containing data, one column       variable.  units: Object class \"character\", unit (variable,       column) names time series object.  positions: Object class \"numeric\", datetime stamps. time       series datetime stamps, positions       length zero.  format: Object class \"character\", datetime format (      \"%Y-%m-%d\"). time stamps \"format\"       equal \"counts\".  FinCenter: Object class \"character\", financial center.  recordIDs: Object class \"data.frame\" ~~ title: Object class \"character\", title printing. documentation: Object class \"character\", default set       current date.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class 'timeSeries' in package timeSeries — timeSeries-class","text":"Class \"structure\", data part. Class \"vector\", class \"structure\", distance 2, explicit coerce.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class 'timeSeries' in package timeSeries — timeSeries-class","text":"list methods \"timeSeries\"   signature. can useful technical purposes, example   reporting bugs methods need explanation documented   corresponding functions looking help pages recommended. short explanations Methods functions supposed   called directly.  [ signature(x = \"timeSeries\", = \"\", j = \"index_timeSeries\"): ... [ signature(x = \"timeSeries\", = \"character\", j = \"character\"): ... [ signature(x = \"timeSeries\", = \"character\", j = \"index_timeSeries\"): ... [ signature(x = \"timeSeries\", = \"character\", j = \"missing\"): ... [ signature(x = \"timeSeries\", = \"index_timeSeries\", j = \"character\"): ... [ signature(x = \"timeSeries\", = \"index_timeSeries\", j = \"index_timeSeries\"): ... [ signature(x = \"timeSeries\", = \"index_timeSeries\", j = \"missing\"): ... [ signature(x = \"timeSeries\", = \"matrix\", j = \"missing\"): ... [ signature(x = \"timeSeries\", = \"missing\", j = \"character\"): ... [ signature(x = \"timeSeries\", = \"missing\", j = \"index_timeSeries\"): ... [ signature(x = \"timeSeries\", = \"missing\", j = \"missing\"): ... [ signature(x = \"timeSeries\", = \"time_timeSeries\", j = \"\"): ... [ signature(x = \"timeSeries\", = \"time_timeSeries\", j = \"character\"): ... [ signature(x = \"timeSeries\", = \"time_timeSeries\", j = \"index_timeSeries\"): ... [ signature(x = \"timeSeries\", = \"time_timeSeries\", j = \"missing\"): ... [ signature(x = \"timeSeries\", = \"timeDate\", j = \"character\"): ... [ signature(x = \"timeSeries\", = \"timeDate\", j = \"index_timeSeries\"): ... [ signature(x = \"timeSeries\", = \"timeDate\", j = \"missing\"): ... [ signature(x = \"timeSeries\", = \"timeSeries\", j = \"index_timeSeries\"): ... [ signature(x = \"timeSeries\", = \"timeSeries\", j = \"missing\"): ... [<- signature(x = \"timeSeries\", = \"character\", j = \"\"): ... [<- signature(x = \"timeSeries\", = \"character\", j = \"missing\"): ... [<- signature(x = \"timeSeries\", = \"timeDate\", j = \"\"): ... [<- signature(x = \"timeSeries\", = \"timeDate\", j = \"missing\"): ... $ signature(x = \"timeSeries\"): ... $<- signature(x = \"timeSeries\", value = \"\"): ... $<- signature(x = \"timeSeries\", value = \"factor\"): ... $<- signature(x = \"timeSeries\", value = \"numeric\"): ... aggregate signature(x = \"timeSeries\"): ... align signature(x = \"timeSeries\"): ... apply signature(X = \"timeSeries\"): ... .data.frame signature(x = \"timeSeries\"): ... .list signature(x = \"timeSeries\"): ... .matrix signature(x = \"timeSeries\"): ... .ts signature(x = \"timeSeries\"): ... attach signature(= \"timeSeries\"): ... cbind2 signature(x = \"\", y = \"timeSeries\"): ... cbind2 signature(x = \"timeSeries\", y = \"\"): ... cbind2 signature(x = \"timeSeries\", y = \"missing\"): ... cbind2 signature(x = \"timeSeries\", y = \"timeSeries\"): ... coerce signature(= \"\", = \"timeSeries\") coerce signature(= \"character\", = \"timeSeries\") coerce signature(= \"data.frame\", = \"timeSeries\") coerce signature(= \"timeSeries\", = \"data.frame\") coerce signature(= \"timeSeries\", = \"list\"): coerce signature(= \"timeSeries\", = \"matrix\") coerce signature(= \"timeSeries\", = \"ts\"): coerce signature(= \"ts\", = \"timeSeries\"):       coerce called directly.       Use (object, \"target_class\") instead. colCummaxs signature(x = \"timeSeries\"): ... colCummins signature(x = \"timeSeries\"): ... colCumprods signature(x = \"timeSeries\"): ... colCumreturns signature(x = \"timeSeries\"): ... colCumsums signature(x = \"timeSeries\"): ... colMeans signature(x = \"timeSeries\"): ... colnames signature(x = \"timeSeries\"): ... colnames<- signature(x = \"timeSeries\"): ... colSums signature(x = \"timeSeries\"): ... comment signature(x = \"timeSeries\"): ... comment<- signature(x = \"timeSeries\"): ... coredata signature(x = \"timeSeries\"): ... coredata<- signature(x = \"timeSeries\", value = \"\"): ... coredata<- signature(x = \"timeSeries\", value = \"matrix\"): ... cummax signature(x = \"timeSeries\"): ... cummin signature(x = \"timeSeries\"): ... cumprod signature(x = \"timeSeries\"): ... cumsum signature(x = \"timeSeries\"): ... diff signature(x = \"timeSeries\"): ... dim signature(x = \"timeSeries\"): ... dim<- signature(x = \"timeSeries\"): ... dimnames signature(x = \"timeSeries\"): ... dimnames<- signature(x = \"timeSeries\", value = \"list\"): ... end signature(x = \"timeSeries\"): ... filter signature(x = \"timeSeries\"): ... finCenter signature(x = \"timeSeries\"): ... finCenter<- signature(x = \"timeSeries\"): ... frequency signature(x = \"timeSeries\"): ... getDataPart signature(object = \"timeSeries\"): ... head signature(x = \"timeSeries\"): ... initialize signature(.Object = \"timeSeries\"): call \"initialize\", call new(\"timeSeries\", ...)       instead. Even better, call timeSeries.  .na signature(x = \"timeSeries\"): ... .unsorted signature(x = \"timeSeries\"): ... isDaily signature(x = \"timeSeries\"): ... isMonthly signature(x = \"timeSeries\"): ... isQuarterly signature(x = \"timeSeries\"): ... isRegular signature(x = \"timeSeries\"): ... lag signature(x = \"timeSeries\"): ... lines signature(x = \"timeSeries\"): ... median signature(x = \"timeSeries\"): ... merge signature(x = \"\", y = \"timeSeries\"): ... merge signature(x = \"matrix\", y = \"timeSeries\"): ... merge signature(x = \"numeric\", y = \"timeSeries\"): ... merge signature(x = \"timeSeries\", y = \"\"): ... merge signature(x = \"timeSeries\", y = \"matrix\"): ... merge signature(x = \"timeSeries\", y = \"missing\"): ... merge signature(x = \"timeSeries\", y = \"numeric\"): ... merge signature(x = \"timeSeries\", y = \"timeSeries\"): ... na.contiguous signature(object = \"timeSeries\"): ... na.omit signature(object = \"timeSeries\"): ... names signature(x = \"timeSeries\"): ... names<- signature(x = \"timeSeries\"): ... Ops signature(e1 = \"array\", e2 = \"timeSeries\"): ... Ops signature(e1 = \"timeSeries\", e2 = \"array\"): ... Ops signature(e1 = \"timeSeries\", e2 = \"timeSeries\"): ... Ops signature(e1 = \"timeSeries\", e2 = \"ts\"): ... Ops signature(e1 = \"timeSeries\", e2 = \"vector\"): ... Ops signature(e1 = \"ts\", e2 = \"timeSeries\"): ... Ops signature(e1 = \"vector\", e2 = \"timeSeries\"): ... outlier signature(x = \"timeSeries\"): ... plot signature(x = \"timeSeries\"): ... points signature(x = \"timeSeries\"): ... print signature(x = \"timeSeries\"): ... quantile signature(x = \"timeSeries\"): ... rank signature(x = \"timeSeries\"): ... rbind2 signature(x = \"\", y = \"timeSeries\"): ... rbind2 signature(x = \"timeSeries\", y = \"\"): ... rbind2 signature(x = \"timeSeries\", y = \"missing\"): ... rbind2 signature(x = \"timeSeries\", y = \"timeSeries\"): ... returns signature(x = \"timeSeries\"): ... rev signature(x = \"timeSeries\"): ... rowCumsums signature(x = \"timeSeries\"): ... rownames signature(x = \"timeSeries\"): ... rownames<- signature(x = \"timeSeries\", value = \"\"): ... rownames<- signature(x = \"timeSeries\", value = \"timeDate\"): ... sample signature(x = \"timeSeries\"): ... scale signature(x = \"timeSeries\"): ... series signature(x = \"timeSeries\"): ... series<- signature(x = \"timeSeries\", value = \"\"): ... series<- signature(x = \"timeSeries\", value = \"matrix\"): ... setDataPart signature(object = \"timeSeries\"): ... show signature(object = \"timeSeries\"): ... sort signature(x = \"timeSeries\"): ... start signature(x = \"timeSeries\"): ... str signature(object = \"timeSeries\"): ... t signature(x = \"timeSeries\"): ... tail signature(x = \"timeSeries\"): ... time signature(x = \"timeSeries\"): ... window signature(x = \"timeSeries\"): ...","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class 'timeSeries' in package timeSeries — timeSeries-class","text":"","code":"## see the help page for timeSeries() showClass(\"timeSeries\") #> Class \"timeSeries\" [package \"timeSeries\"] #>  #> Slots: #>                                                                              #> Name:          .Data         units     positions        format     FinCenter #> Class:        matrix     character       numeric     character     character #>                                                  #> Name:      recordIDs         title documentation #> Class:    data.frame     character     character #>  #> Extends:  #> Class \"structure\", from data part #> Class \"vector\", by class \"structure\", distance 2, with explicit coerce"},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-getDataPart.html","id":null,"dir":"Reference","previous_headings":"","what":"DataPart,timeSeries-method — DataPart,timeSeries-method","title":"DataPart,timeSeries-method — DataPart,timeSeries-method","text":"Utilities called implement object@.Data timeSeries objects.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-getDataPart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DataPart,timeSeries-method — DataPart,timeSeries-method","text":"","code":"## Load Microsoft Data -    X <- MSFT[1:10, 1:4]     ## Get Data Part -     DATA <- getDataPart(X)    class(DATA) #> [1] \"matrix\" \"array\""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-isRegular.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a time series is regular — isRegular","title":"Checks if a time series is regular — isRegular","text":"Checks time series regular.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-isRegular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a time series is regular — isRegular","text":"","code":"# S4 method for timeSeries isDaily(x) # S4 method for timeSeries isMonthly(x) # S4 method for timeSeries isQuarterly(x)  # S4 method for timeSeries isRegular(x)  # S4 method for timeSeries frequency(x, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-isRegular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a time series is regular — isRegular","text":"x R object class 'timeSeries'. ... arguments passed.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-isRegular.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks if a time series is regular — isRegular","text":"regular time series? time series daily, monthly,   weekly, speak regular series.  can tested calling   functions isDaily, isMonthly, isQuarterly,   general isRegular. series regular   frequency can determined calling frequency. definitions daily, monthly, quarterly time series:  daily series one date/time stamp per       day. monthly series one date/time stamp       per month. quarterly series one date/time stamp       per quarter. regular series either monthly quarterly series. Note definitions monthly series also daily   series, quarterly series also monthly series.   hand, daily series regular! yet implemented case weekly series.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-isRegular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a time series is regular — isRegular","text":"* functions return TRUE FALSE depending      whether series fulfills condition .  frequency returns general 1, quarterly series 4,     monthly series 12.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-isRegular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if a time series is regular — isRegular","text":"","code":"data(MSFT) isRegular(MSFT) #> [1] FALSE  ## a monthly ts ap <- as.timeSeries(AirPassengers) isRegular(ap) #> [1] TRUE  ## a quarterly ts pres <- as.timeSeries(presidents) isRegular(pres) #> [1] TRUE"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-isUnivariate.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a time series is univariate — isUnivariate","title":"Checks if a time series is univariate — isUnivariate","text":"Checks time series object     rectangular object univariate multivariate.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-isUnivariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a time series is univariate — isUnivariate","text":"","code":"isUnivariate(x) isMultivariate(x)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-isUnivariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a time series is univariate — isUnivariate","text":"x object class \"timeSeries\" rectangular          object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-isUnivariate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks if a time series is univariate — isUnivariate","text":"rectangular object x considered univariate      function NCOL(x) returns one, considered     multivariate NCOL(x) returns value bigger one.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-isUnivariate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a time series is univariate — isUnivariate","text":"logical value","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-isUnivariate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if a time series is univariate — isUnivariate","text":"","code":"## Load Microsoft Data -     setRmetricsOptions(myFinCenter = \"GMT\")    data(MSFT)    Open = MSFT[, \"Open\"]    ## Is the 'timeSeries' Univariate -     isUnivariate(MSFT) #> [1] FALSE    isUnivariate(Open) #> [1] TRUE  ## Is the 'timeSeries' Multivariate -       isMultivariate(MSFT) #> [1] TRUE    isMultivariate(Open) #> [1] FALSE"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-readSeries.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a 'timeSeries' from a text file — readSeries","title":"Read a 'timeSeries' from a text file — readSeries","text":"Reads file table format creates \"timeSeries\" object   . first column table must hold timestamps.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-readSeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a 'timeSeries' from a text file — readSeries","text":"","code":"readSeries(file, header = TRUE, sep = \";\", zone = \"\",      FinCenter = \"\", format, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-readSeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a 'timeSeries' from a text file — readSeries","text":"file filename spreadsheet dataset import      data records.  header logical value indicating whether file contains     names variables first line.  missing,     value determined file format: 'header' set     'TRUE' first row contains one fewer fields     number columns.  sep field seperator used spreadsheet file separate     columns, default \";\". sep = \";\" reading     series fails, reading automatically repeated     sep=\",\".  zone time zone financial center data recorded.      default zone = \"\" short GMT.  FinCenter character location financial center named     \"continent/city\".  format character string format POSIX notation specifying     timestamp format. format specified     first column file timestamp format specifier,     e.g. \"%Y-%m-%d\" short ISO 8601 format.  ... Additional arguments passed read.table() used     read file.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-readSeries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a 'timeSeries' from a text file — readSeries","text":"file imported read.table. Note different   default argument \"sep\". first column table must hold timestamps. Format   timestamps can either specified header first column   format argument.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-readSeries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a 'timeSeries' from a text file — readSeries","text":"object class \"timeSeries\"","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-readSeries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a 'timeSeries' from a text file — readSeries","text":"","code":"## full path to an example file fn <- system.file(\"extdata/msft.csv\", package = \"timeSeries\") ## first few lines of the file readLines(fn, n = 5) #> [1] \"\\\"%Y-%m-%d\\\";Open;High;Low;Close;Volume\"            #> [2] \"2000-09-27;63.4375;63.5625;59.8125;60.625;53077800\" #> [3] \"2000-09-28;60.8125;61.875;60.625;61.3125;26180200\"  #> [4] \"2000-09-29;61;61.3125;58.625;60.3125;37026800\"      #> [5] \"2000-10-02;60.5;60.8125;58.25;59.125;29281200\"       ## import the file msft <- readSeries(fn) head(msft) #> GMT #>               Open    High     Low   Close   Volume #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 53077800 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 26180200 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 37026800 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 29281200 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 42687000 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 68226700  ## is msft the same as the data object MSFT? all.equal(msft, MSFT)  #> [1] \"Attributes: < Component “documentation”: 1 string mismatch >\" ## ... almost, except for slot 'documentation' c(msft@documentation, MSFT@documentation) #> [1] \"Thu Jun  1 10:17:35 2023\" \"\"                         ## actually, all.equal() says 'attribute', not slot. this is ok too: c(attr(MSFT, \"documentation\"), attr(msft, \"documentation\")) #> [1] \"\"                         \"Thu Jun  1 10:17:35 2023\" ## make 'documentation' equal, here \"\", and compare again: msft@documentation <- \"\" all.equal(msft, MSFT) # TRUE #> [1] TRUE"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotDocumentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set optional attributes of a 'timeSeries' — attributes","title":"Get and set optional attributes of a 'timeSeries' — attributes","text":"Extracts assigns optional attributes      \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotDocumentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set optional attributes of a 'timeSeries' — attributes","text":"","code":"getAttributes(obj)          setAttributes(obj) <- value"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotDocumentation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set optional attributes of a 'timeSeries' — attributes","text":"obj timeSeries object whose optional attributes          accessed. value object, new value attribute, NULL          remove attribute.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotDocumentation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and set optional attributes of a 'timeSeries' — attributes","text":"timeSeries object documented. default time series object holds documentation slot string creation time user defined . . Optionally whole creation process history can recorded. @documentation  slot may optional \"Attributes\" element. attribute  tracked whole life time object whenever time series changed. Whenever like informed optional attributes,  like recover can dot , evenmore, whenever like  add information addiitonal attribute can also . two functions getAttributes setAttributes provide  access allow modify optional attributes timeSeries  object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotDocumentation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set optional attributes of a 'timeSeries' — attributes","text":"","code":"set.seed(1234) ## Create an artificial 'timeSeries' Object -     tS <- dummyMonthlySeries()    tS #> GMT #>                   TS.1       TS.2 #> 2023-01-01 0.113703411 0.28273358 #> 2023-02-01 0.622299405 0.92343348 #> 2023-03-01 0.609274733 0.29231584 #> 2023-04-01 0.623379442 0.83729563 #> 2023-05-01 0.860915384 0.28622328 #> 2023-06-01 0.640310605 0.26682078 #> 2023-07-01 0.009495756 0.18672279 #> 2023-08-01 0.232550506 0.23222591 #> 2023-09-01 0.666083758 0.31661245 #> 2023-10-01 0.514251141 0.30269337 #> 2023-11-01 0.693591292 0.15904600 #> 2023-12-01 0.544974836 0.03999592  ## Get Optional Attributes -    getAttributes(tS) #> NULL    tS@documentation #> [1] \"Thu Jun  1 10:17:35 2023\"     ## Set a new Optional Attribute -    setAttributes(tS) <- list(what=\"A dummy Series\")    tS #> GMT #>                   TS.1       TS.2 #> 2023-01-01 0.113703411 0.28273358 #> 2023-02-01 0.622299405 0.92343348 #> 2023-03-01 0.609274733 0.29231584 #> 2023-04-01 0.623379442 0.83729563 #> 2023-05-01 0.860915384 0.28622328 #> 2023-06-01 0.640310605 0.26682078 #> 2023-07-01 0.009495756 0.18672279 #> 2023-08-01 0.232550506 0.23222591 #> 2023-09-01 0.666083758 0.31661245 #> 2023-10-01 0.514251141 0.30269337 #> 2023-11-01 0.693591292 0.15904600 #> 2023-12-01 0.544974836 0.03999592    getAttributes(tS) #> $what #> $what[[1]] #> [1] \"A dummy Series\" #>  #>     tS@documentation #> [1] \"Thu Jun  1 10:17:35 2023\" #> attr(,\"Attributes\") #> attr(,\"Attributes\")$what #> attr(,\"Attributes\")$what[[1]] #> [1] \"A dummy Series\" #>  #>"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotFinCenter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set Financial center of a 'timeSeries' — finCenter","title":"Get and set Financial center of a 'timeSeries' — finCenter","text":"Get assign financial center \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotFinCenter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set Financial center of a 'timeSeries' — finCenter","text":"","code":"# S4 method for timeSeries finCenter(x) # S4 method for timeSeries finCenter(x) <- value  getFinCenter(x)          setFinCenter(x) <- value"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotFinCenter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set Financial center of a 'timeSeries' — finCenter","text":"x \"timeSeries\" object. value character location financial center named      \"continent/city\".","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotFinCenter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set Financial center of a 'timeSeries' — finCenter","text":"","code":"## An artificial 'timeSeries' Object -     tS <- dummyMonthlySeries()    tS #> GMT #>                  TS.1      TS.2 #> 2023-01-01 0.21879954 0.2012480 #> 2023-02-01 0.81059855 0.2588098 #> 2023-03-01 0.52569755 0.9921504 #> 2023-04-01 0.91465817 0.8073523 #> 2023-05-01 0.83134505 0.5533336 #> 2023-06-01 0.04577026 0.6464061 #> 2023-07-01 0.45609148 0.3118243 #> 2023-08-01 0.26518667 0.6218192 #> 2023-09-01 0.30467220 0.3297702 #> 2023-10-01 0.50730687 0.5019975 #> 2023-11-01 0.18109621 0.6770945 #> 2023-12-01 0.75967064 0.4849912  ## Print Financial Center -    finCenter(tS) #> [1] \"GMT\"    getFinCenter(tS) #> [1] \"GMT\"  ## Assign New Financial Center -     finCenter(tS) <- \"Zurich\"    tS #> Zurich #>                           TS.1      TS.2 #> 2023-01-01 01:00:00 0.21879954 0.2012480 #> 2023-02-01 01:00:00 0.81059855 0.2588098 #> 2023-03-01 01:00:00 0.52569755 0.9921504 #> 2023-04-01 02:00:00 0.91465817 0.8073523 #> 2023-05-01 02:00:00 0.83134505 0.5533336 #> 2023-06-01 02:00:00 0.04577026 0.6464061 #> 2023-07-01 02:00:00 0.45609148 0.3118243 #> 2023-08-01 02:00:00 0.26518667 0.6218192 #> 2023-09-01 02:00:00 0.30467220 0.3297702 #> 2023-10-01 02:00:00 0.50730687 0.5019975 #> 2023-11-01 01:00:00 0.18109621 0.6770945 #> 2023-12-01 01:00:00 0.75967064 0.4849912    setFinCenter(tS) <- \"New_York\"    tS #> New_York #>                           TS.1      TS.2 #> 2022-12-31 19:00:00 0.21879954 0.2012480 #> 2023-01-31 19:00:00 0.81059855 0.2588098 #> 2023-02-28 19:00:00 0.52569755 0.9921504 #> 2023-03-31 20:00:00 0.91465817 0.8073523 #> 2023-04-30 20:00:00 0.83134505 0.5533336 #> 2023-05-31 20:00:00 0.04577026 0.6464061 #> 2023-06-30 20:00:00 0.45609148 0.3118243 #> 2023-07-31 20:00:00 0.26518667 0.6218192 #> 2023-08-31 20:00:00 0.30467220 0.3297702 #> 2023-09-30 20:00:00 0.50730687 0.5019975 #> 2023-10-31 20:00:00 0.18109621 0.6770945 #> 2023-11-30 19:00:00 0.75967064 0.4849912"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotSeries.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set the data component of a 'timeSeries' — series-methods","title":"Get and set the data component of a 'timeSeries' — series-methods","text":"Get set data component 'timeSeries'.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotSeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set the data component of a 'timeSeries' — series-methods","text":"","code":"series(x) series(x) <- value"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotSeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set the data component of a 'timeSeries' — series-methods","text":"x timeSeries object. value vector, data.frame matrix object         numeric data.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotSeries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and set the data component of a 'timeSeries' — series-methods","text":"series returns @.Data slot timeSeries   object matrix form. assignment version series replaces values   time series value. row column names   value used NULL, otherwise left   x. natural use value   dimensions .matrix(x), case   result almost value converted   \"timeSeries\" directly. Methods zoo::coredata assignment counterpart   defined, well. Users wish use ensure   zoo::coredata visible (e.g., calling   library('zoo') library('xts')) employ   zoo:: prefix calls.  methods equivalent   series `series<-`, respectively.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotSeries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set the data component of a 'timeSeries' — series-methods","text":"","code":"## A Dummy 'timeSeries' Object    ts <- timeSeries()    ts #>  #>      SS.1 #> [1,]   NA  ## Get the Matrix Part -     mat <- series(ts)    class(mat) #> [1] \"matrix\" \"array\"     mat #>      SS.1 #> [1,]   NA  ## Assign a New Univariate Series -     series(ts) <- rnorm(12)    ts #>  #>             SS.1 #>  [1,] -0.6937202 #>  [2,] -1.4482049 #>  [3,]  0.5747557 #>  [4,] -1.0236557 #>  [5,] -0.0151383 #>  [6,] -0.9359486 #>  [7,]  1.1022975 #>  [8,] -0.4755931 #>  [9,] -0.7094400 #> [10,] -0.5012581 #> [11,] -1.6290935 #> [12,] -1.1676193     ## Assign a New Bivariate Series -     series(ts) <- matrix(rnorm(12), ncol = 2)    ts #>  #>            SS.1       SS.2 #> [1,] -2.1800396 -0.8553646 #> [2,] -1.3409932 -0.2806230 #> [3,] -0.2942939 -0.9943401 #> [4,] -0.4658975 -0.9685143 #> [5,]  1.4494963 -1.1073182 #> [6,] -1.0686427 -1.2519859"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set time stamps of a 'timeSeries' — time","title":"Get and set time stamps of a 'timeSeries' — time","text":"Functions methods extracting modifying positions      'timeSeries' objects.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set time stamps of a 'timeSeries' — time","text":"","code":"# S4 method for timeSeries time(x, ...) # S3 method for timeSeries time(x) <- value  getTime(x)          setTime(x) <- value"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set time stamps of a 'timeSeries' — time","text":"value valid value time component x. x object class timeSeries. ... optional arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotTime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and set time stamps of a 'timeSeries' — time","text":"time time<- generic functions methods   class \"timeSeries\". get set time component   object. getTime setTime non-generic alternatives   non-generic wrappers time time<-, respectively. another generic function time<- defined package   zoo. package loaded time<- gets   \"timeSeries\" method. Also, \"time<-\" called   object class \"timeSeries\", call   dispatched \"zoo:time<-\" apply suitable method.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set time stamps of a 'timeSeries' — time","text":"time getTime, \"timeDate\" object, time<- setTime, modified  \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotTime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set time stamps of a 'timeSeries' — time","text":"","code":"## Create Dummy 'timeSeries' -          X <- timeSeries(matrix(rnorm(24), 12), timeCalendar())     ## Return Series Positions -    getTime(X) #> GMT #>  [1] [2023-01-01] [2023-02-01] [2023-03-01] [2023-04-01] [2023-05-01] #>  [6] [2023-06-01] [2023-07-01] [2023-08-01] [2023-09-01] [2023-10-01] #> [11] [2023-11-01] [2023-12-01]    time(X)   #> GMT #>  [1] [2023-01-01] [2023-02-01] [2023-03-01] [2023-04-01] [2023-05-01] #>  [6] [2023-06-01] [2023-07-01] [2023-08-01] [2023-09-01] [2023-10-01] #> [11] [2023-11-01] [2023-12-01]    ## Add / Subtract one Day from X    setTime(X) <- time(X) - 24*3600 # sec    X #> GMT #>                  TS.1         TS.2 #> 2022-12-31 -0.5238281  0.656588464 #> 2023-01-31 -0.4968500  2.548991071 #> 2023-02-28 -1.8060313 -0.034760390 #> 2023-03-31 -0.5820759 -0.669633580 #> 2023-04-30 -1.1088896 -0.007604756 #> 2023-05-31 -1.0149620  1.777084448 #> 2023-06-30 -0.1623095 -1.138607737 #> 2023-07-31  0.5630558  1.367827179 #> 2023-08-31  1.6478175  1.329564791 #> 2023-09-30 -0.7733534  0.336472797 #> 2023-10-31  1.6059096  0.006892838 #> 2023-11-30 -1.1578085 -0.455468738    time(X) <- time(X) + 24*3600 # sec    X #> GMT #>                  TS.1         TS.2 #> 2023-01-01 -0.5238281  0.656588464 #> 2023-02-01 -0.4968500  2.548991071 #> 2023-03-01 -1.8060313 -0.034760390 #> 2023-04-01 -0.5820759 -0.669633580 #> 2023-05-01 -1.1088896 -0.007604756 #> 2023-06-01 -1.0149620  1.777084448 #> 2023-07-01 -0.1623095 -1.138607737 #> 2023-08-01  0.5630558  1.367827179 #> 2023-09-01  1.6478175  1.329564791 #> 2023-10-01 -0.7733534  0.336472797 #> 2023-11-01  1.6059096  0.006892838 #> 2023-12-01 -1.1578085 -0.455468738"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotUnits.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set unit names of a 'timeSeries' — units","title":"Get and set unit names of a 'timeSeries' — units","text":"Gets sets column names \"timeSeries\" object.     column names also called units unit names.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotUnits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set unit names of a 'timeSeries' — units","text":"","code":"getUnits(x)          setUnits(x) <- value"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotUnits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set unit names of a 'timeSeries' — units","text":"x \"timeSeries\" object. value character vector unit names.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries-slotUnits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set unit names of a 'timeSeries' — units","text":"","code":"## A Dummy 'timeSeries' Object    tS <- dummyMonthlySeries()    tS #> GMT #>                  TS.1       TS.2 #> 2023-01-01 0.35698708 0.60189755 #> 2023-02-01 0.62747768 0.99874081 #> 2023-03-01 0.74160019 0.37559938 #> 2023-04-01 0.56596682 0.55512663 #> 2023-05-01 0.98078651 0.42944396 #> 2023-06-01 0.57681274 0.57587778 #> 2023-07-01 0.43904205 0.43250740 #> 2023-08-01 0.22859970 0.22484576 #> 2023-09-01 0.08215807 0.08498474 #> 2023-10-01 0.85026492 0.63729826 #> 2023-11-01 0.23466126 0.43101637 #> 2023-12-01 0.98816745 0.07271609  ## Get the Units -     getUnits(tS) #> [1] \"TS.1\" \"TS.2\"  ## Assign New Units to the Series -     setUnits(tS) <- c(\"A\", \"B\")    head(tS) #> GMT #>                    A         B #> 2023-01-01 0.3569871 0.6018975 #> 2023-02-01 0.6274777 0.9987408 #> 2023-03-01 0.7416002 0.3755994 #> 2023-04-01 0.5659668 0.5551266 #> 2023-05-01 0.9807865 0.4294440 #> 2023-06-01 0.5768127 0.5758778"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries.html","id":null,"dir":"Reference","previous_headings":"","what":"Create objects from class 'timeSeries' — TimeSeriesClass","title":"Create objects from class 'timeSeries' — TimeSeriesClass","text":"timeSeries creates \"timeSeries\" object scratch.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create objects from class 'timeSeries' — TimeSeriesClass","text":"","code":"timeSeries(data, charvec, units = NULL, format = NULL, zone = \"\",             FinCenter = \"\", recordIDs = data.frame(), title = NULL,             documentation = NULL, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create objects from class 'timeSeries' — TimeSeriesClass","text":"data matrix object objects can coerced matrix. charvec character vector dates times objects can     coerced \"timeDate\" object. units optional character string, allows overwrite      current column names \"timeSeries\" object. default      NULL means column names selected     automatically. format format specification input character vector,     character string format POSIX notation. zone time zone financial center data recorded. FinCenter character location  financial center named      \"continent/city\". recordIDs timeSeries, data frame can used record     identification. title optional title string, specified input's data      name deparsed. documentation optional documentation string, vector character strings. ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create objects from class 'timeSeries' — TimeSeriesClass","text":"timeSeries returns S4 object class \"timeSeries\".","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create objects from class 'timeSeries' — TimeSeriesClass","text":"Generation Time Series Objects: defined \"timeSeries\" class many aspects   similar S-Plus class name, also   important differences. class seven Slots, 'Data' slot   holds time series data matrix form, 'position' slot   holds time/date character vector, 'format'   'FinCenter' slots 'timeDate' object,   'units' slot holds column names data matrix,   'title' 'documentation' slot hold descriptive character   strings.  Date time managed way   timeDate objects. .timeSeries also creates \"timeSeries\" objects.   .timeSeries(x) mostly equivalent timeSeries(x)   two functions different methods. Beside , main   difference two functions .timeSeries   accept additional arguments. one argument call   naturally interpreted ‘convert ’,   .timeSeries expressive recommended   case. \"timeSeries\" methods provided many base R functions,   including arithmetic operations, mathematical functions, print,   summary, time series functions. explicitly   documented, since can just used.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/timeSeries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create objects from class 'timeSeries' — TimeSeriesClass","text":"","code":"## Load Microsoft data -    # Microsoft Data:     setRmetricsOptions(myFinCenter = \"GMT\")    data(MSFT)    head(MSFT) #> GMT #>               Open    High     Low   Close   Volume #> 2000-09-27 63.4375 63.5625 59.8125 60.6250 53077800 #> 2000-09-28 60.8125 61.8750 60.6250 61.3125 26180200 #> 2000-09-29 61.0000 61.3125 58.6250 60.3125 37026800 #> 2000-10-02 60.5000 60.8125 58.2500 59.1250 29281200 #> 2000-10-03 59.5625 59.8125 56.5000 56.5625 42687000 #> 2000-10-04 56.3750 56.5625 54.5000 55.4375 68226700  ## Create a 'timeSeries' object, the direct Way ...    Close <- MSFT[, 5]    head(Close) #> GMT #>              Volume #> 2000-09-27 53077800 #> 2000-09-28 26180200 #> 2000-09-29 37026800 #> 2000-10-02 29281200 #> 2000-10-03 42687000 #> 2000-10-04 68226700     ## Create a 'timeSeries' object from scratch -     data <- as.matrix(MSFT[, 4])    charvec <- rownames(MSFT)    Close <- timeSeries(data, charvec, units = \"Close\")    head(Close) #> GMT #>              Close #> 2000-09-27 60.6250 #> 2000-09-28 61.3125 #> 2000-09-29 60.3125 #> 2000-10-02 59.1250 #> 2000-10-03 56.5625 #> 2000-10-04 55.4375    c(start(Close), end(Close)) #> GMT #> [1] [2000-09-27] [2001-09-27]  ## Cut out April data from 2001 -     tsApril01 <- window(Close, \"2001-04-01\", \"2001-04-30\")     tsApril01 #> GMT #>              Close #> 2001-04-02 55.8125 #> 2001-04-03 53.3750 #> 2001-04-04 51.9375 #> 2001-04-05 56.7500 #> 2001-04-06 56.1875 #> 2001-04-09 57.1500 #> 2001-04-10 59.6800 #> 2001-04-11 60.0400 #> 2001-04-12 62.1800 #> 2001-04-16 60.7900 #> 2001-04-17 61.4800 #> 2001-04-18 65.4300 #> 2001-04-19 68.0400 #> 2001-04-20 69.0000 #> 2001-04-23 68.2500 #> 2001-04-24 67.5500 #> 2001-04-25 69.6900 #> 2001-04-26 69.1300 #> 2001-04-27 67.1200 #> 2001-04-30 67.7500  ## Compute Continuous Returns -     returns(tsApril01) #> GMT #>                   Close #> 2001-04-03 -0.044655387 #> 2001-04-04 -0.027301399 #> 2001-04-05  0.088614584 #> 2001-04-06 -0.009961344 #> 2001-04-09  0.016985078 #> 2001-04-10  0.043317566 #> 2001-04-11  0.006014051 #> 2001-04-12  0.035022398 #> 2001-04-16 -0.022608103 #> 2001-04-17  0.011286617 #> 2001-04-18  0.062268950 #> 2001-04-19  0.039114899 #> 2001-04-20  0.014010737 #> 2001-04-23 -0.010929071 #> 2001-04-24 -0.010309370 #> 2001-04-25  0.031188771 #> 2001-04-26 -0.008068045 #> 2001-04-27 -0.029506728 #> 2001-04-30  0.009342398     ## Compute Discrete Returns -     returns(tsApril01, type = \"discrete\") #> GMT #>                   Close #> 2001-04-03 -0.044655387 #> 2001-04-04 -0.027301399 #> 2001-04-05  0.088614584 #> 2001-04-06 -0.009961344 #> 2001-04-09  0.016985078 #> 2001-04-10  0.043317566 #> 2001-04-11  0.006014051 #> 2001-04-12  0.035022398 #> 2001-04-16 -0.022608103 #> 2001-04-17  0.011286617 #> 2001-04-18  0.062268950 #> 2001-04-19  0.039114899 #> 2001-04-20  0.014010737 #> 2001-04-23 -0.010929071 #> 2001-04-24 -0.010309370 #> 2001-04-25  0.031188771 #> 2001-04-26 -0.008068045 #> 2001-04-27 -0.029506728 #> 2001-04-30  0.009342398     ## Compute Discrete Returns, Don't trim -    returns(tsApril01, trim = FALSE) #> GMT #>                   Close #> 2001-04-02           NA #> 2001-04-03 -0.044655387 #> 2001-04-04 -0.027301399 #> 2001-04-05  0.088614584 #> 2001-04-06 -0.009961344 #> 2001-04-09  0.016985078 #> 2001-04-10  0.043317566 #> 2001-04-11  0.006014051 #> 2001-04-12  0.035022398 #> 2001-04-16 -0.022608103 #> 2001-04-17  0.011286617 #> 2001-04-18  0.062268950 #> 2001-04-19  0.039114899 #> 2001-04-20  0.014010737 #> 2001-04-23 -0.010929071 #> 2001-04-24 -0.010309370 #> 2001-04-25  0.031188771 #> 2001-04-26 -0.008068045 #> 2001-04-27 -0.029506728 #> 2001-04-30  0.009342398     ## Compute Discrete Returns, Use Percentage Values -     tsRet <- returns(tsApril01, percentage = TRUE, trim = FALSE)    tsRet #> GMT #>                 Close #> 2001-04-02         NA #> 2001-04-03 -4.4655387 #> 2001-04-04 -2.7301399 #> 2001-04-05  8.8614584 #> 2001-04-06 -0.9961344 #> 2001-04-09  1.6985078 #> 2001-04-10  4.3317566 #> 2001-04-11  0.6014051 #> 2001-04-12  3.5022398 #> 2001-04-16 -2.2608103 #> 2001-04-17  1.1286617 #> 2001-04-18  6.2268950 #> 2001-04-19  3.9114899 #> 2001-04-20  1.4010737 #> 2001-04-23 -1.0929071 #> 2001-04-24 -1.0309370 #> 2001-04-25  3.1188771 #> 2001-04-26 -0.8068045 #> 2001-04-27 -2.9506728 #> 2001-04-30  0.9342398       ## Aggregate Weekly -     GoodFriday(2001) #> GMT #> [1] [2001-04-13]    to <- timeSequence(from = \"2001-04-11\", length.out = 3, by = \"week\")     from <- to - 6*24*3600    from #> GMT #> [1] [2001-04-05] [2001-04-12] [2001-04-19]    to #> GMT #> [1] [2001-04-11] [2001-04-18] [2001-04-25]    applySeries(tsRet, from, to, FUN = sum) #> GMT #>                Close #> 2001-04-11 14.496993 #> 2001-04-18  8.596986 #> 2001-04-25  6.307597  ## Create large 'timeSeries' objects with different 'charvec' object classes -     # charvec is a 'timeDate' object    head(timeSeries(1:1e6L, timeSequence(length.out = 1e6L, by = \"sec\"))) #> GMT #>                     TS.1 #> 2023-05-03 09:17:37    1 #> 2023-05-03 09:17:38    2 #> 2023-05-03 09:17:39    3 #> 2023-05-03 09:17:40    4 #> 2023-05-03 09:17:41    5 #> 2023-05-03 09:17:42    6    head(timeSeries(1:1e6L, seq(Sys.timeDate(), length.out = 1e6L, by = \"sec\"))) #> GMT #>                     TS.1 #> 2023-06-01 09:17:37    1 #> 2023-06-01 09:17:38    2 #> 2023-06-01 09:17:39    3 #> 2023-06-01 09:17:40    4 #> 2023-06-01 09:17:41    5 #> 2023-06-01 09:17:42    6    # 'charvec' is a 'POSIXt' object    head(timeSeries(1:1e6L, seq(Sys.time(), length.out = 1e6L, by = \"sec\"))) #> GMT #>                     TS.1 #> 2023-06-01 09:17:37    1 #> 2023-06-01 09:17:38    2 #> 2023-06-01 09:17:39    3 #> 2023-06-01 09:17:40    4 #> 2023-06-01 09:17:41    5 #> 2023-06-01 09:17:42    6    # 'charvec' is a 'numeric' object    head(timeSeries(1:1e6L, 1:1e6L)) #> GMT #>                     TS.1 #> 1970-01-01 00:00:01    1 #> 1970-01-01 00:00:02    2 #> 1970-01-01 00:00:03    3 #> 1970-01-01 00:00:04    4 #> 1970-01-01 00:00:05    5 #> 1970-01-01 00:00:06    6"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/utils-description.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates date and user information — description","title":"Creates date and user information — description","text":"Creates returns string containing user, current datetime   user name.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/utils-description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates date and user information — description","text":"","code":"description()"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/utils-description.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates date and user information — description","text":"","code":"## Show Default Description String -     description() #> [1] \"Thu Jun  1 10:17:37 2023 by user: georgi\""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/utils-structure.html","id":null,"dir":"Reference","previous_headings":"","what":"timeSeries object structure — str-methods","title":"timeSeries object structure — str-methods","text":"Compactly display structure \"timeSeries\" object.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/utils-structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"timeSeries object structure — str-methods","text":"","code":"# S4 method for timeSeries str(object, ...)"},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/utils-structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"timeSeries object structure — str-methods","text":"object object class timeSeries. ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/utils-structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"timeSeries object structure — str-methods","text":"str report object class timeSeries.","code":""},{"path":"https://geobosh.github.io/timeSeriesDoc/reference/utils-structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"timeSeries object structure — str-methods","text":"","code":"## Load Microsoft Data Set -    data(MSFT)    X <- MSFT[1:12, 1:4]    colnames(X) <- abbreviate(colnames(X), 4)      ## Display Structure -     str(X) #> Time Series:           #>  Name:               object #> Data Matrix:         #>  Dimension:          12 4 #>  Column Names:       Open High Low Clos #>  Row Names:          2000-09-27  ...  2000-10-12 #> Positions:           #>  Start:              2000-09-27 #>  End:                2000-10-12 #> With:                #>  Format:             %Y-%m-%d #>  FinCenter:          GMT #>  Units:              Open High Low Clos #>  Title:              Time Series Object #>  Documentation:"}]
